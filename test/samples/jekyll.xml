<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jussi Hallila</title>
    <description>Personal ramblings and tech babble</description>
    <link>http://jussi.hallila.com/</link>
    <atom:link href="http://jussi.hallila.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Jul 2017 16:30:55 +0000</pubDate>
    <lastBuildDate>Sun, 09 Jul 2017 16:30:55 +0000</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>

      <item>
        <title>Introduction to Kotlin - Generics, Delegates and Extension functions</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article was originally published in &lt;a href=&quot;https://www.codementor.io/jussihallila/introduction-to-kotlin-part-3-9p0k7ivqj&quot;&gt;Codementor.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Welcome back. In the last few articles, we went through Kotlin syntax basics, lambdas, null and type safety. We also touched on a few extension functions from the standard library. Check out &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-1.html&quot;&gt;&lt;strong&gt;Part 1&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-2.html&quot;&gt;&lt;strong&gt;Part 2&lt;/strong&gt;&lt;/a&gt; if you’ve missed them. Today we’ll see more extension function magic and talk a little about generics and delegates. Finally, we’ll wrap up this series with a short intro on visibility and packages.&lt;/p&gt;

&lt;h2 id=&quot;extension-functions&quot;&gt;Extension Functions&lt;/h2&gt;

&lt;p&gt;So, we have been throwing around the term “extension function” in a few places. Kotlin language has the capability to extend any object with functions or properties, even if you don’t have access to modify the codebase of that particular class. Extensions are a brilliant way to bring in extra functionality in a nicely context-bound way. Sometimes in Java codebase you might see a bunch of classes ending with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Util&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Utils&lt;/code&gt; keyword. In Kotlin, extensions make those classes disappear.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun String.uberized(): String = this + &quot;, bro&quot;
println(&quot;What's up&quot;.uberized()) // What's up, bro
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the example above, we have created an extension function to String class. Now that that extension is defined, it is available to be imported throughout the project. With this neat little functionality we can extend classes from libraries with all the needed functionality and make &lt;em&gt;wishy-washy collections of static
utility functions obsolete&lt;/em&gt;. Pretty neat, huh?&lt;/p&gt;

&lt;p&gt;That String extension defined above is an example of the simplest use. We can also access the internals of our classes with these extensions, the same way we could with standard member functions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Summer(var country: String, var sunny: Boolean)
fun Summer.isItSunny(): String = when {
        country == &quot;Ireland&quot; -&amp;gt; &quot;Hah, nope. Of course not. :(&quot;
        sunny -&amp;gt; &quot;Awww yiss. Shorts on! 8)&quot;
        else -&amp;gt; &quot;Nah, not really. It's warm though, because summer! 8)&quot;
    }

var twentySeventeen = Summer(&quot;Ireland&quot;, true)
println(twentySeventeen.isItSunny()) // :(
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are a few other keywords that can be attached to our extension functions. We can add operators to our classes by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;operator&lt;/code&gt; keyword and we can create infix functions with the &lt;code class=&quot;highlighter-rouge&quot;&gt;infix&lt;/code&gt; keyword. Operators have a defined list of functions that you can override; infix possibilities are endless.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;operator fun Summer.inc(): Summer { // the `++` operator
    if(country == &quot;Ireland&quot;) country = &quot;Not Ireland&quot;
    return this
}

twentySeventeen++
println(twentySeventeen.isItSunny()) // Awww yiss. Shorts on! 8)

infix fun Summer.holidayIn(country: String): Summer {
    this.country = country
    return this
}

twentySeventeen holidayIn &quot;Myanmar&quot;
println(twentySeventeen) // Summer(country=Myanmar, sunny=true))
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With these little tricks, we can create simple classes and keep them doing their one thing, and doing it well. If there is a need to extend these classes, we don’t necessarily have to start building a network of class hierarchies; we can simply add these bad boys in there.&lt;/p&gt;

&lt;p&gt;On top of extension functions, Kotlin also offers the opportunity to create extension properties. That is, we can (in theory) extend individual fields in our classes! There are some things you need to know about extension properties. One is that to get their value, you need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; function for them. Another one is that if you want to make them mutable and set their value, you have to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;set()&lt;/code&gt; function. Kotlin doesn’t actually modify the class itself, so you cannot add an extension property with a backing field.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val Summer.temperature: Int
    get() = if(sunny) 25 else 15

println(twentySeventeen.temperature)

var Summer.icecream: Boolean
    get() = sunny
    set(yesno: Boolean) {
        this.sunny = yesno
    }

println(&quot;Should I get icecream? Heck ${twentySeventeen.icecream}&quot;) // Should I get icecream? Heck true
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind that, in Kotlin, &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; is read-only and has only a getter. &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, on the other hand, can be reassigned and has both getter and setter.&lt;/p&gt;

&lt;h2 id=&quot;higher-order-functions&quot;&gt;Higher order functions&lt;/h2&gt;

&lt;p&gt;When jumping head first into Kotlin code, you may think it odd at first. Especially when you’re coming from a Java world, it might seems strange that there is a distinct lack of classes and uppercase first letters in general. Kotlin leans more towards functional programming than Java and therefore its ability to feed in top level functions from everywhere shapes the language structure quite a bit. Higher order functions and the ease of creating them is another step in the direction of functional programming.&lt;/p&gt;

&lt;p&gt;Higher order functions are functions that either take in another function as a parameter or return a function. HOFs are ever-present in functional programming, and Kotlin uses higher order functions extensively as well. The syntax for Kotlin to take in or return a function is &lt;em&gt;parentheses&lt;/em&gt;, followed by an &lt;em&gt;arrow&lt;/em&gt; and the &lt;em&gt;function return type&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun vacation(destination: String, intineraryAction: (String) -&amp;gt; Unit, itineraries: (String) -&amp;gt; List&amp;lt;String&amp;gt;) {
    print(&quot;We are going to $destination! And in there we will go to: &quot;)
    itineraries(destination).forEach(intineraryAction)
}


val itineraryAction: (String) -&amp;gt; Unit = { it -&amp;gt; print(&quot;$it, &quot;) }
vacation(&quot;Shanghai&quot;, itineraryAction) {
    when(it){
        &quot;Shanghai&quot; -&amp;gt; listOf(&quot;Oriental Pearl&quot;, &quot;The Bund&quot;, &quot;Qipu Lu&quot;)
        else       -&amp;gt; emptyList()
    }
} // We are going to Shanghai! And in there we will go to: Oriental Pearl, The Bund, Qipu Lu,
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this example, we have a function &lt;code class=&quot;highlighter-rouge&quot;&gt;vacation&lt;/code&gt; that takes in a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; and two other functions. The first one of these functions will be of type &lt;code class=&quot;highlighter-rouge&quot;&gt;(String) -&amp;gt; Unit&lt;/code&gt; so it takes a String parameter and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt;, equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; in Java. We create this function inline, assign it to a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;itineraryAction&lt;/code&gt; and pass it into our higher order &lt;code class=&quot;highlighter-rouge&quot;&gt;vacation&lt;/code&gt; function. The second lambda argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;vacation&lt;/code&gt; is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;(String) -&amp;gt; List&amp;lt;String&amp;gt;&lt;/code&gt; and in this case we complete it with a lambda. Remember that, in Kotlin, if a function is the last argument to a function, we can close the braces (if it is the only argument, omit braces altogether) and write our lambda in a curly brace block.&lt;/p&gt;

&lt;p&gt;Kotlin also has this notion of &lt;em&gt;lambdas with receivers&lt;/em&gt; or &lt;em&gt;higher order extension functions&lt;/em&gt;. In practice, these monsters are &lt;em&gt;extension functions that are passed in or returned from a function&lt;/em&gt;. With this kind of structure you get the ability to scope your passed-in lambdas and give them the context of the extended class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Shape(val blue: String) {
    var shape: String = &quot;&quot;
    operator fun invoke(shape: String): Shape {
        this.shape = shape
        return this
    }
}

class Color(val fault: String) {
    fun shape(shape: Shape, function: Shape.() -&amp;gt; Unit) = shape.function()
}

fun your(thing: String, hoef: Color.() -&amp;gt; Unit) = Color(thing).hoef()

// Invoking
val `is` = Shape(&quot;Yellow&quot;)
your(&quot;Favourite&quot;) {
    shape(`is`(&quot;Triangle&quot;)) {
        println(&quot;Color of $shape is $blue and it's your $fault.&quot;)
    }
} // Color of Triangle is Yellow and it's your Favourite.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There’s a little bit to cover here. First of all we have a couple classes, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;Colour&lt;/code&gt; maybe). Our &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; has properties, &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt;. Then it has this funky &lt;em&gt;operator function&lt;/em&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;invoke&lt;/code&gt;. This function is a Kotlin built-in and gives you the ability to &lt;em&gt;call an instantiated object&lt;/em&gt; as if it were a function, essentially creating a function with empty character as its name.&lt;/p&gt;

&lt;p&gt;Our second class is a bit simpler; its constructor takes in a &lt;code class=&quot;highlighter-rouge&quot;&gt;fault&lt;/code&gt; property and it has a single function. This function is one of these higher order extension functions. Its parameters are our previously defined &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; object and a function that extends a &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class. The function itself does nothing besides calling our passed-in extension function &lt;em&gt;using the passed-in object as a receiver&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, we define a top level function called &lt;code class=&quot;highlighter-rouge&quot;&gt;your&lt;/code&gt; that takes in a String and a function extending our &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;When invoking this, you will notice that we are assigning our &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; into a keyword. In Kotlin, we can actually do this if we just remember to surround the keyword with backticks. After the assignment we dive into our miniature function waterfall. First we call &lt;code class=&quot;highlighter-rouge&quot;&gt;your&lt;/code&gt; with a String and a lambda. This lambda calls the member function &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; class. Since our lambda is an extension function of &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; we have access to its properties and functions.&lt;/p&gt;

&lt;p&gt;Within the function call of &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt; we &lt;em&gt;invoke&lt;/em&gt; our &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; object, thereby calling its &lt;code class=&quot;highlighter-rouge&quot;&gt;invoke&lt;/code&gt; function. The implementation of invoke takes in a String, which we happily pass to it, and then returns itself, in this case our instantiated &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; object. Since the member function &lt;code class=&quot;highlighter-rouge&quot;&gt;shape&lt;/code&gt; takes in two arguments, a String and a lambda, we need to pass the lambda in there as well. And that we do indeed. This final lambda does nothing but uses String interpolation and prints out our properties from those two classes &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; that we are in context of.&lt;/p&gt;

&lt;p&gt;For Groovy developers this is all groovy (hehe). For others, this introduces the notion of blocks. These blocks are tied together by higher order functions, higher order extensions functions and lambdas with receivers, and they provide a way to build an API that looks seamless to the user. These little tricks make Kotlin a wonderful language to create your own type safe DSLs. For a longer example of a DSL, you should check out &lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;the example of a type safe HTML builder from Kotlin’s official website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;type-parameters-and-generics&quot;&gt;Type Parameters and Generics&lt;/h2&gt;

&lt;p&gt;At times we want to give our functions proper types and we know what they are doing; at times we have no idea, but we know that the types are the same; and at times we approximately know that the types are something similar/familiar but don’t really know what they could be. These three cases are handled somewhat similarly in Kotlin and Java, though Kotlin’s superior inference plays a big role here as well.&lt;/p&gt;

&lt;p&gt;Let’s start off with a simple type parameterized class definition.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Drinksy&amp;lt;T&amp;gt;(val content: T)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;Drinksy&lt;/code&gt; we have a type parameter that has a getter. We can use this to our advantage in few ways. We know what the return type of the getter is once we have created our class. Here there is nothing different from the Java world.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val stringyDrink: Drinksy&amp;lt;String&amp;gt; = Drinksy(&quot;Milk&quot;) // Or more labourious `Drinksy&amp;lt;String&amp;gt;(&quot;Milk&quot;)`
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we take this one step further, we can define a proper class for our content. With this we can safely know the type of our &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; property. If we do this we can then bound our generic type param in &lt;code class=&quot;highlighter-rouge&quot;&gt;Drinksy&lt;/code&gt; so some fool doesn’t make you drink lead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;interface Liquid
class Milk: Liquid

data class Drinksy&amp;lt;T: Liquid&amp;gt;(val content: T)
val milkyDrink: Drinksy&amp;lt;Milk&amp;gt; = Drinksy(Milk())
val smooth: Milk = milkyDrink.content
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now if we try to create our Drinksy with a milk String, we will not get anywhere because the compiler will stop us. This is nice and all, but what we are really talking about is standard type parameters; there is no magic here. What makes this interesting is that if you copy-paste our &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid&lt;/code&gt; interface and our new &lt;code class=&quot;highlighter-rouge&quot;&gt;Drinksy&lt;/code&gt; class to Intellij, you will get a suggestion squiggly line telling that our type param &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; only has &lt;code class=&quot;highlighter-rouge&quot;&gt;out variance&lt;/code&gt;. IntelliJ suggests that we redefine our &lt;code class=&quot;highlighter-rouge&quot;&gt;Drinksy&lt;/code&gt; class like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Drinksy&amp;lt;out T: Liquid&amp;gt;(val content: T)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That looks a bit weird, doesn’t it? In the Java world we have few keywords when defining our bounded type variables. The words &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt; are used to define &lt;em&gt;contravariance&lt;/em&gt; and &lt;em&gt;covariance&lt;/em&gt; of the wildcarded (with &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; type param) generic types respectively. Kotlin makes our minds (and our fingers) do a little bit less work and defines these &lt;em&gt;variances&lt;/em&gt; with the keywords &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;. The easiest way to think about these words is to take them as they are, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;going typed parameter uses &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; keyword, &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;coming typed parameter uses the out keyword. In our previous example, we can’t modify the content of Drinksy class to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, mutable property. If we would do that our &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; would be having an ingoing setter function as well and our &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; bounded type wouldn’t line up anymore. This simple rule of thumb works similarly for functions as well.&lt;/p&gt;

&lt;p&gt;What good is this in the real world, then? With these bounds we can do safe type trickery with our objects. Let’s take our &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;ed Drinksy from above and try the following.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Drinksy&amp;lt;out T: Liquid&amp;gt;(val content: T)
val milkyDrink: Drinksy&amp;lt;Milk&amp;gt; = Drinksy(Milk())
val liquidDrink: Drinksy&amp;lt;Liquid&amp;gt; = milkyDrink
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This works fine in Kotlin because the compiler knows that our &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;going. In Java we can kind of do the same thing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Drinksy&amp;lt;T extends Liquid&amp;gt;{
    private T content;
}
interface Liquid{}
interface Milk extends Liquid{}

final Drinksy&amp;lt;Milk&amp;gt; milkyDrink = new Drinksy&amp;lt;&amp;gt;();
final Drinksy&amp;lt;? extends Liquid&amp;gt; liquidDrink = milkyDrink;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is a bit of a difference in our liquidDrinks between languages. In Kotlin the type is &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid&lt;/code&gt; where in Java it is this monstrous &lt;code class=&quot;highlighter-rouge&quot;&gt;? extends Liquid&lt;/code&gt;. If we would have tried to stick&lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid&lt;/code&gt; in there for the Java example we would have gotten a compile error. This is because in Kotlin we have &lt;em&gt;declaration site variance&lt;/em&gt;, whereas in Java the same problem is solved by &lt;em&gt;use-site variance&lt;/em&gt;. Kotlin knows from the itty-bitty &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; keyword in our &lt;em&gt;type declaration&lt;/em&gt; that our Drinksy is safe to drink, it is still Liquid.&lt;/p&gt;

&lt;p&gt;Again if we change our &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; in the Drinksy data class to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; (and also removing the out keyword from the type definition) we will stumble upon a compiler error. Since we don’t know that the bounded type is only outgoing, we can’t assume that our other drink is only &lt;code class=&quot;highlighter-rouge&quot;&gt;Liquid&lt;/code&gt;, it is precisely &lt;code class=&quot;highlighter-rouge&quot;&gt;Milk&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Drinksy&amp;lt;T: Liquid&amp;gt;(var content: T)
val milkyDrink: Drinksy&amp;lt;Milk&amp;gt; = Drinksy(Milk())
val otherDrink: Drinksy&amp;lt;Liquid&amp;gt; = milkyDrink
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This will blow up in our face in compile time with an error &lt;code class=&quot;highlighter-rouge&quot;&gt;Type mismatch. Required: Drinksy&amp;lt;Liquid&amp;gt;, Found: Drinksy&amp;lt;Milk&amp;gt;&lt;/code&gt;. In this case, Kotlin cannot assume the &lt;em&gt;variance&lt;/em&gt; of our type and therefore does not allow it.&lt;/p&gt;

&lt;p&gt;Kotlin also has &lt;em&gt;use-site variance&lt;/em&gt; similar to Java. On the use site we can use our already familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; keywords. Use cases for this are when we have a class that has both &lt;em&gt;contra (&lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;)&lt;/em&gt;- and &lt;em&gt;covariant (&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;)&lt;/em&gt; function types but we are, &lt;em&gt;at this site&lt;/em&gt;, using only covariant for example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Drinksy&amp;lt;T: Liquid&amp;gt;(var content: T)
data class Dronksy&amp;lt;T: Liquid&amp;gt;(var content: T, val anotherDrink: Drinksy&amp;lt;out T&amp;gt;)
fun &amp;lt;T: Liquid&amp;gt; Dronksy&amp;lt;T&amp;gt;.justTheOtherOne(): Drinksy&amp;lt;out T&amp;gt;{
    return anotherDrink
}

val milkyDrink: Dronksy&amp;lt;Milk&amp;gt; = Dronksy(Milk(), Drinksy(Milk()))
val compileErrorLiquid: Drinksy&amp;lt;Liquid&amp;gt; = milkyDrink.anotherDrink
val maybeLiquid: Drinksy&amp;lt;out Liquid&amp;gt; = milkyDrink.anotherDrink
val definitelyLiquid: Drinksy&amp;lt;out Liquid&amp;gt; = milkyDrink.justTheOtherOne()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Bounded types is a bit of a complicated subject and there are a lot of tricks involved when bounding your type parameters. Luckily for Kotliners, the IDE support for &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; and &lt;em&gt;invariant&lt;/em&gt; (AKA neither &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; nor &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;) types is top notch and will guide you a lot of the way.&lt;/p&gt;

&lt;p&gt;Kotlin also has &lt;code class=&quot;highlighter-rouge&quot;&gt;reified&lt;/code&gt; generics which are implemented using a little bit of finesse. These are familiar to C# devs, but people from the Java world rarely see them. With &lt;code class=&quot;highlighter-rouge&quot;&gt;reified&lt;/code&gt; generics you can make direct mentions to the type parameter of a function. Kotlin introduces these to &lt;code class=&quot;highlighter-rouge&quot;&gt;inline&lt;/code&gt; functions, which essentially means functions that are copy-pasted to the location of all of the calls made towards them. These functions are good when you stumble upon performance issues due to large amount of lambdas and generated Java anonymous inner classes. They also give us reification.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Rairai&amp;lt;T&amp;gt;
inline fun &amp;lt;reified T&amp;gt;whatsMyType(rai: Rairai&amp;lt;T&amp;gt;){
    println(T::class)
}
inline fun &amp;lt;reified T&amp;gt;doTheRai(str: Any) {
    if(str is T){
        println(str)
    } else {
        println(&quot;Not a String type&quot;)
    }
}

whatsMyType(Rairai&amp;lt;Int&amp;gt;()) // class kotlin.Int
doTheRai&amp;lt;String&amp;gt;(&quot;Hi&quot;) // Hi
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this example, we have a class with a single type parameter, then two top level inline functions that have a &lt;code class=&quot;highlighter-rouge&quot;&gt;reified&lt;/code&gt; keyword in their type param info box. Our first function prints out the type of our reified type parameter. In our second, we can check if our passed-in object matches our reified type param. Both of these actions would be impossible without reification and the possibility to inline functions in Kotlin.&lt;/p&gt;

&lt;h2 id=&quot;delegates&quot;&gt;Delegates&lt;/h2&gt;

&lt;p&gt;A new thing that Kotlin brings with it is &lt;em&gt;delegation&lt;/em&gt;. With Kotlin you can nonchalantly pass the puck to a different object without the need to implement anything yourself. The concept is best explained with an example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Work
interface OrgMember{
    fun doWork(): Work
}
class MiddleManager(val subordinate: Employee): OrgMember by subordinate {
    fun report(): String = &quot;I did all the work&quot;
}
class Employee: OrgMember {
    override fun doWork(): Work = Work()
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this snippet we create an interface that defines an Organization Member. This member has one job and one job only: to do some work. As is tradition, when the company has grown to a certain size we get middle management as well. In our example we define our &lt;code class=&quot;highlighter-rouge&quot;&gt;MiddleManager&lt;/code&gt; as a class that takes one subordinate and use the magical &lt;code class=&quot;highlighter-rouge&quot;&gt;by&lt;/code&gt; keyword to &lt;em&gt;delegate&lt;/em&gt; the actual working part to our poor employee. Note that we can still define other functions within our delegating class, but the main thing, actually doing any work, is still part of the delegate’s job. This is a useful pattern especially to kill inheritance trees only to achieve code reuse.&lt;/p&gt;

&lt;p&gt;Kotlin provides us with the possibility of using &lt;em&gt;delegated properties&lt;/em&gt; as well. Delegated properties differ from class delegation a little bit by using a strongly defined contract on how they need to be implemented. At times you might have the same pattern to initialize a property in your class. These are good use cases for delegated properties. With the same &lt;code class=&quot;highlighter-rouge&quot;&gt;by&lt;/code&gt; keyword you can add a block of code to your individual field that gets called when the property is accessed. You can do this for both class properties and local variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class FourHourWorkWeekEmployee {
    val canYouDoThis: Boolean = true
    val workResult: Work by Outsourcing()
}
class Outsourcing {
    operator fun getValue(master: FourHourWorkWeekEmployee, property: KProperty&amp;lt;*&amp;gt;): Work {
        println(&quot;Yessir, I'll get this done.&quot;)
        return Work()
    }
}
val employee = FourHourWorkWeekEmployee()
val resut = employee.workResult // Yessir, I'll get this done.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;FourHourWorkWeekEmployee&lt;/code&gt; is a smart and confident cookie. He knows he can do all types of work with this one simple trick (other employees hate him)! He contracts his own work via outsourcing to a worker that carries out the actual implementation. This &lt;code class=&quot;highlighter-rouge&quot;&gt;Outsourcing&lt;/code&gt; class is called every time someone tries to access employee’s &lt;code class=&quot;highlighter-rouge&quot;&gt;workResult&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The contract for delegating is that for &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s you need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;getValue&lt;/code&gt; function that takes in two parameters, the &lt;em&gt;delegator class&lt;/em&gt; and the &lt;em&gt;delegator property&lt;/em&gt;. In our outsourcing example we locked down our outsourcer to work only for &lt;code class=&quot;highlighter-rouge&quot;&gt;FourHourWorkWeekEmployee&lt;/code&gt; by changing the incoming parameter type for &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; to be a strict type. We could have made it &lt;code class=&quot;highlighter-rouge&quot;&gt;Any?&lt;/code&gt; and that way anyone of our other classes could have outsourced their work.&lt;/p&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;s We also need to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt; function in the delegatee. This function has a similar contract as getValue: it takes a third argument which is our set value or the property type and has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; return type.&lt;/p&gt;

&lt;p&gt;Kotlin provides few standard library delegates you can use to make your values smarter. Let’s go through a few of those.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Sloth {
    val timeToSleep: Boolean by lazy {
        println(&quot;Always&quot;)
        true
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lazy&lt;T&gt; can be used to lazily initialize objects. `lazy` is a function that takes in a zero argument lambda and returns a delegate class that takes care of lazy initialization. The block above is called when our `timeToSleep` property is accessed for the first time. In subsequent accesses only the value `true` is returned.&lt;/T&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class NosyNeighbour {
    var shoppingTrip: Groceries by observable(Groceries()) {
        property, previousGroceries: Groceries, newGroceries: Groceries -&amp;gt;
            println(&quot;Again he bought more craft beer. I believe he is a beer connoisseur, not an alcoholic.&quot;)
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Observable is another built-in delegate we can use in Kotlin. This is meant to be used with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; properties, so it implements both &lt;code class=&quot;highlighter-rouge&quot;&gt;getValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt;. For &lt;code class=&quot;highlighter-rouge&quot;&gt;getValue&lt;/code&gt; there is not much of a story to tell for our offspring, because its’ implementation only returns the value itself. &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt;, on the other hand, is interesting. It takes in two arguments, an initial value and a lambda which is called with the property itself, the previous value of our property and the new value of our property. With &lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt; we can easily do resource syncing or notification pushing to external sources.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun Groceries.containsBeer(): Boolean = // implementation
class Wifey {
    var shoppingTrip: Groceries by vetoable(Groceries()) {
        property, previousGroceries: Groceries, newGroceries: Groceries -&amp;gt;
        !newGroceries.containsBeer()
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The next one we touch is the &lt;code class=&quot;highlighter-rouge&quot;&gt;vetoable&lt;/code&gt; delegate. This can be used to &lt;em&gt;veto&lt;/em&gt; the property value change. Its’ &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt; has the same incoming signature as &lt;code class=&quot;highlighter-rouge&quot;&gt;observable&lt;/code&gt; and takes in the same initial value and a three argument lambda. Outgoing signature from &lt;code class=&quot;highlighter-rouge&quot;&gt;vetoable&lt;/code&gt;s &lt;code class=&quot;highlighter-rouge&quot;&gt;setValue&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; which indicates whether or not to set the new value. In our case we may or may not give wife the veto right to define our &lt;code class=&quot;highlighter-rouge&quot;&gt;shoppingTrip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Delegates in Kotlin provide a nice and powerful way to assign common actions to properties and classes without the need to make extra class to external functions, and without the need to start building complex inheritance hierarchies.&lt;/p&gt;

&lt;h2 id=&quot;namespaces-modules-and-scoping&quot;&gt;Namespaces, Modules, and Scoping&lt;/h2&gt;

&lt;p&gt;We’ll wrap up this post by talking a little bit about scoping your applications. In Kotlin, you have packages the same way as in Java, and they are defined at the top of a file. The difference between Java packages is that you can actually omit the declaration and then your file and its contents are in “default” package. Another difference between Java and Kotlin is that we don’t have to, nor should we, define one class per one file.&lt;/p&gt;

&lt;p&gt;Source files can contain top level classes or objects, functions or values. This means that you can have essentially &lt;em&gt;global&lt;/em&gt; values defined in a file, or you can group your abstract functions in a single place. This possibility makes it much easier to reuse your codebase and make it succinct without the need for extra namespacing on the call site. If you definitely want namespacing for your functions, an object is a good candidate to wrap them with. That way you can namespace them with the object name and have a cohesive collection of functions in one place. In reality this is rarely needed, though.&lt;/p&gt;

&lt;p&gt;Visibility modifiers work similarly to Java. We have &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;. On top of those we have &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; as well, which means that classes or functions marked with that are visible in the &lt;em&gt;same module&lt;/em&gt; (Maven or Gradle module or IntelliJ module). All top level functions and classes marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; are visible for the same file only, &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; are visible to subclasses. Kotlin does not offer &lt;em&gt;package protected&lt;/em&gt; (Java default) visibility at all, &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; is the proposed solution to solve your needs for “&lt;em&gt;one public API&lt;/em&gt;” cases. Modularity comes towards you hard in Kotlin, even if Java keeps pushing its modules to the future. Also one thing to note is that things in Kotlin are &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;That wraps up this introduction to Kotlin language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-1.html&quot;&gt;&lt;strong&gt;Introduction to Kotlin Part 1&lt;/strong&gt;&lt;/a&gt; covered basic syntax with variables, classes and functions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-2.html&quot;&gt;&lt;strong&gt;Part 2&lt;/strong&gt;&lt;/a&gt; touched a little bit on extensions and null safety as well as types.&lt;/p&gt;

&lt;p&gt;Finally, in &lt;strong&gt;Part 3&lt;/strong&gt; we went through extension functions, higher order functions, generics and delegates. With these recipes you should be able to get nicely started with Kotlin and create your initial lines of code with the language.&lt;/p&gt;

&lt;p&gt;Remember, even though Kotlin was promoted to a first class language on Android, that doesn’t mean that it is all Android driven. The language works really well for web applications as well, and interoperability with Spring makes it a very practical choice when choosing the stack for your next web project.&lt;/p&gt;

&lt;p&gt;Good luck and until next time!&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-3.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-3.html</guid>

        <category>Kotlin</category>

        <category>JVM</category>


      </item>

      <item>
        <title>Introduction to Kotlin - Collections, Lambdas, Null Safety &amp; Types</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article was originally published in &lt;a href=&quot;https://www.codementor.io/jussihallila/introduction-to-kotlin-part-2-9oybmr9rb&quot;&gt;Codementor.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-1.html&quot;&gt;&lt;strong&gt;Introduction to Kotlin: Part 1&lt;/strong&gt;&lt;/a&gt;, we covered basic syntax, and now we can start to look at the aspects that actually make Kotlin so loved. In this post, we will cover collections and lambdas, a few handy extension functions (&lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;), null safety, and we’ll touch a little bit on types. We’ll cover a lot of ground in this post, so come prepared. If you want to jump straight to generics, delegates and extension functions, check out &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-3.html&quot;&gt;&lt;strong&gt;Introduction to Kotlin: Part 3&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;kotlin-collections-and-lambdas&quot;&gt;Kotlin Collections and Lambdas&lt;/h2&gt;

&lt;p&gt;One of the most interesting parts of Kotlin is its collection library and the methods provided with that. Things you need to know about this beast are twofold: on the right side is the “immutable” side, on the left side are mutable collections. Kotlin is very adamant to tell you that there is a difference, and there is. Like the Kotlin language in general, collections lean heavily on the immutable side. This makes functional programming patterns particularly useful, if not essential to your programming style. Immutability also gives you some leeway and reduces your cognitive load around parallelism and concurrency, something we won’t be touching in this post&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;What are Kotlin collections then? If you are familiar with Java 8 (again sorry to you Android and corporate devs :( ) you will be quite knowledgeable about these collection methods (Java streams) and idioms as well. Kotlin, though, takes it one step further and provides extensions for most things you can think of (and few that you can’t). Let’s take a closer look.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;listOf(1,2,3)
mutableListOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)

setOf(1,2,3)
mutableSetOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)

mapOf(1 to &quot;a&quot;, 2 to &quot;b&quot;, 3 to &quot;c&quot;)
mutableMapOf(&quot;a&quot; to 1, &quot;b&quot; to 2, &quot;c&quot; to 3)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Those are the basics. Kotlin offers you helper methods to create collections. I’ve listed both immutable and mutable versions of &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; here. Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; in our map declarations is actually an &lt;code class=&quot;highlighter-rouge&quot;&gt;infix function&lt;/code&gt; and not a keyword &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. The real power of Kotlin collections, in addition to their default immutability, comes from the extension functions in the Kotlin &lt;em&gt;stdlib&lt;/em&gt;. If you are familiar with functional programming, you will be familiar with most of these functions. They are a bunch of helper functions and &lt;em&gt;higher order functions&lt;/em&gt; that provide commonly done operations to your collections. With these extension functions we get all the usual suspects like &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; and many many more.&lt;/p&gt;

&lt;p&gt;Before we can use those, though, we need to talk about one important thing in Kotlin: lambdas. The beauty of the Kotlin standard library’s collection extension functions comes from the easy to use lambdas that are enhanced with &lt;em&gt;just enough&lt;/em&gt; type inference to keep the programmer safe. In Kotlin there are few ways to define a lambda function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val aList = listOf(1,2,4)
aList.map { elem -&amp;gt;
    elem + 1
} // 2,3,5

aList.filter { it != 1} // 2,4

fun folder(a: Int, b: Int) = a + b
aList.reduce(::folder) // 7
// also: aList.reduce { a, b -&amp;gt; folder(a, b) }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the first example, we define probably the most common use of Kotlin lambdas. We can shorthand the anonymous function with angle brackets. We can also choose the name of the argument coming into our lambda (we have omitted the type definition in here; we can see from &lt;code class=&quot;highlighter-rouge&quot;&gt;aList&lt;/code&gt; list that it is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;), in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;elem&lt;/code&gt;. And then we define the body of our lambda. No need for a return statement, the last line will be returned.&lt;/p&gt;

&lt;p&gt;The next example takes it one step further and omits even the argument definition. In Kotlin, by default one argument lambdas will receive the argument named as &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;. That makes sense because we know we are working on &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt;; no need to name things. Note that overuse of &lt;em&gt;itism&lt;/em&gt;, especially in nested functions, leads to very messy code. In simple one-off cases or continuation cases, that is all fine and dandy. In more complex scenarios it is better to tread lightly.&lt;/p&gt;

&lt;p&gt;The last one introduces a few new concepts to us. First is a local function&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; that we reference with a &lt;em&gt;doublecolon&lt;/em&gt; syntax, familiar to us from Java 8 (though there is no need to mess this beauty up with &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; keywords or Class names). The local function looks and acts very similarly to class or global scoped function but as an addition it also has access to variables defined in the same scope as the function itself. The second way to reference our local function is to just simply call it within our lambda, as is displayed in the commented-out section.&lt;/p&gt;

&lt;p&gt;As you can see, lambdas in Kotlin are defined in a straightforward manner. They are very noticeable in your code base as well and make the usage of higher order functions a breeze. The best part about Kotlin and lambdas is the type inference which will give you a red sguiggly line under your code when the types don’t line up. With this help from the compiler you can focus your energy on the actual business logic rather than trying to figure out how many times a loop should be traversed.&lt;/p&gt;

&lt;p&gt;More information about Kotlin collection extension functions can be found on the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html#functions&quot;&gt;official website API doc&lt;/a&gt;, or you can take a shortcut and check out the handy &lt;a href=&quot;http://jussi.hallila.com/Kollections&quot;&gt;cheat sheet here&lt;/a&gt;. There are simply too many collection extension functions to mention in an introductory post.&lt;/p&gt;

&lt;h2 id=&quot;null-safety&quot;&gt;Null safety&lt;/h2&gt;

&lt;p&gt;If you &lt;em&gt;surf&lt;/em&gt; to the Jetbrains website about Kotlin you will see how they advertise the “Null safety” of Kotlin as one of the main headlines. What does this actually mean?&lt;/p&gt;

&lt;p&gt;In Kotlin you have absolute null safety for your Kotlin code and relative null safety to other JVM code that you interoperate with. The Kotlin compiler is very strict in dissecting the code you have written when it comes to nullability. If you define a variable that might be null you &lt;em&gt;need&lt;/em&gt; to define it as &lt;em&gt;nullable&lt;/em&gt;. This Kotlin compiler can figure out if you are able to make a naive call using your variable or if you need to make a null check of it. How does this work in practice?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;var nil: String? = null
val notNil: String = &quot;Hi&quot;
var nil = null
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;These three variable declarations have two nullables and one not-null. The common denominator for nullables is the &lt;em&gt;question mark&lt;/em&gt;; nullable variables and function arguments are defined with the question mark, not-nulls without it. This question mark plays an important role in Kotlin “null safe” code. If the Kotlin compiler sees this question mark either in a variable declaration or in a function argument/return type, it will force you to do a null check on it. If you are writing predominantly Kotlin code, you are &lt;em&gt;smartly steered away from nullable code&lt;/em&gt;. However, Kotlin is highly interoperable with Java, so when you are touching the Java world you will have to assume that some data passed around might be null. Kotlin provides a few helpers to deal with this &lt;a href=&quot;https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;&lt;em&gt;billion dollar mistake&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class Lad(val name: String, val age: Int)
fun doSomething(laddy: Lad?){
    print(laddy.name)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If you try to do this you will see how the Kotlin compiler will moan about it. In IntelliJ you will get a red squiggly line under the text. It will shout &lt;code class=&quot;highlighter-rouge&quot;&gt;Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type Lad?&lt;/code&gt;. To get around this you have few options.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
fun doSomething(laddy: Lad?){
    if(laddy != null){
        print(laddy.name)
    }
}

fun doSomething(laddy: Lad?){
    print(laddy?.name)
}

fun doSomething(laddy: Lad?){
    laddy?.name?.let {
        print(it)
    }
    /** Or
    * laddy?.name?.let { name -&amp;gt;
    *     print(name)
    * }
    **/
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The first example is the old, trusted not-null check. We know this is a &lt;em&gt;good boye&lt;/em&gt; and have been using it in other languages all over the place. The compiler knows that after the null check is done we can use our variable, so the squiggly line will be gone from the print statement. In the second example we get to see some magic. The already familiar question mark is there again, but this time in a different role. In this context the question mark says &lt;code class=&quot;highlighter-rouge&quot;&gt;If laddy is not null, then take the name property from it&lt;/code&gt;. If laddy is null, then &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; will be printed into the console.&lt;/p&gt;

&lt;p&gt;The third function introduces a new kind of extension function we can use for this, called &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;. We’ll return to that in a few minutes, but first we’ll wrap up null safety and take a look at the beautifully named &lt;code class=&quot;highlighter-rouge&quot;&gt;elvis operator&lt;/code&gt;. If we want to return something from our function, we can use elvis as a default value in case we bump into a null. Using elvis goes a little bit like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun doSomething(laddy: Lad?) = laddy?.name?: &quot;James&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, we use the &lt;em&gt;safe call operator&lt;/em&gt; for both &lt;code class=&quot;highlighter-rouge&quot;&gt;laddy&lt;/code&gt; and its &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;. In case the latter of these two fellows is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, we’ll return “James”; in case the former one is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; we’ll still return “James,” because we will never actually reach the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; property access attempt. Only if both of them are non-null will we return the name. This makes sense because that’s really the only way we can safely return the actual name. We used this same kind of double safety in that mysterious &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; function which was shown few lines up in the previous code block. Now we can take a closer look at that and its compatriots as well.&lt;/p&gt;

&lt;h2 id=&quot;extension-functions-apply-let-run-and-with&quot;&gt;Extension functions: Apply, Let, Run, and With&lt;/h2&gt;

&lt;p&gt;Kotlin introduces a few extension functions that help us scope our application and calls. The first one we saw already; &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; is an extension that takes one parameter, a lambda, into it. Scroll up few mouse wheelies and take another look at the code example. The only thing &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; does is call the lambda we have passed into it and use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; as that lambda’s only parameter. The &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; in this case means the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; property of our object, but only if both &lt;code class=&quot;highlighter-rouge&quot;&gt;laddy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; are non-null. &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; operates only on values that exist; being an extension it cannot extend something that doesn’t exist!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Apply&lt;/code&gt; is another funky extension function that we can use in many cases. One common usage for this handy fellow is to create an object that needs many calls after each other but doesn’t have good capabilities to do it. For simplicity’s sake we can think of Java beans and their getter and setters for example. Warning, Java code ahead!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;public class JavaBeanClass {
   private String thing;
   private String thang;

   public String getThing() {
       return thing;
   }

   public void setThing(String thing) {
       this.thing = thing;
   }

   public String getThang() {
       return thang;
   }

   public void setThang(String thang) {
       this.thang = thang;
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Ugh, that looks a bit ugly and verbose doesn’t it? Let’s run with &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; (haha) regardless. We’ll jump back to the Kotlin side.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val mrBean = JavaBeanClass().apply {
    setThing(&quot;Wild&quot;)
    setThang(&quot;erbeest&quot;)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Excellent, much more comfortable already. See how we can call the setter methods within our apply function. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;mrBean&lt;/code&gt; is now a fully populated object with &lt;code class=&quot;highlighter-rouge&quot;&gt;wild&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;erbeest&lt;/code&gt; within it. In Kotlin, you actually receive some extra magic for your setter and getter as well. They are treated as properties when coming from Java and the same code as above can be written like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val mrBean = JavaBeanClass().apply {
    thing = &quot;Wild&quot;
    thang = &quot;erbeest&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Much nicer and more concise. Apply has many useful functions, but this is the one I like the most. It takes in a lambda function which it calls and then returns &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, which is the original object. The value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; within apply is therefore the object it was called upon.&lt;/p&gt;

&lt;p&gt;Next up, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt;. This guy is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, with a small caveat. It is actually not an extension function, just a function that takes &lt;strong&gt;two&lt;/strong&gt; parameters and is used to scope the context of an object. The use of &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; is a little bit frowned upon because it makes somewhat unreadable code at times. Let’s look at an example regardless. We’ll use the same &lt;code class=&quot;highlighter-rouge&quot;&gt;mrBean&lt;/code&gt; we defined earlier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;with(mrBean) {
    thing = &quot;the&quot;
    thang = &quot;ain't no&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
Very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, don’t you think? No, not at all! We kinda cheated on this because we didn’t do anything with the return value. &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; returns the value of the last expression within the &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; block&lt;/em&gt;. This is an important distinction so let’s see a better example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val yo = with(mrBean) {
    thang + &quot;thing&quot;
}
print(yo) // ain't nothing
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Sneaky, isn’t it?&lt;/p&gt;

&lt;p&gt;We’ll keep marching on to &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function called &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; is a very simple little thing. It is an extension function that takes in one parameter, a lambda. It just calls that lambda and returns the response from that lambda. “What use is this guy, then?” you might ask. I did too. When I’m thinking of &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; I see two use cases. Using it to run something if and only if the object it’s called on is not null (using it similarly as &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; few lines above, but in &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;s case &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; as the scoped object) or using it to scope our function calls and safeguard our lambdas. We have to remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; does the same thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;with&lt;/code&gt; but is usually easier to follow since we are calling it to a guaranteed non-null object and we tend to be more aware of that object’s scope.&lt;/p&gt;

&lt;h2 id=&quot;types-checking-casting-aliasing-and-safety&quot;&gt;Types: Checking, casting, aliasing, and safety&lt;/h2&gt;

&lt;p&gt;In the Java world you might have stumbled across &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; checks like &lt;code class=&quot;highlighter-rouge&quot;&gt;if (clazz instanceOf SomeClass)&lt;/code&gt; where the programmer has wanted to see if they are working on the correct implementation of their interface or extended base class. You might have also seen a lot of parentheses when a transition from one more generic class has been casted to a more specific one. This seems to happen a lot in the boundaries of the application, be it database access, API calls or incoming JSON. Kotlin is similar to Java in many ways and this is (sort of) one of them as well. There might be a need to cast and check your types to see that you are working with the correct implementation. Luckily, Kotlin provides some helpers around it and gives us an opportunity to make these checks in a safe way. Let’s take a short look at what we can do without getting too much into type theory.&lt;/p&gt;

&lt;p&gt;Type inference in Kotlin is very good, and the compiler gives a lot of useful hints and tips while you are writing code. When you have the need to check if an object is of some type you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; keyword.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun tryAndFailToCompileToGetTheAnswer(plzPassInThirteen: Any): Int {
    return plzPassInThirteen + 29
}

fun getTheAnswer(plzPassInThirteen: Any): Int {
    if (plzPassInThirteen is Int) {
        return plzPassInThirteen + 29
    }
    return 666
}
println(getTheAnswer(13)) // 42
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the above block, the first function will fail miserably and doesn’t actually compile at all. It will moan to you that it can’t find a &lt;code class=&quot;highlighter-rouge&quot;&gt;plus&lt;/code&gt; function that matches the types. The second function fixes that: it does a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; check and at that point Kotlin &lt;em&gt;smart casts&lt;/em&gt; the value to an Int so it is usable within the if statement. Usually you will probably stumble more upon &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statement when it comes to &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; checks, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun getTheAnswer(plzPassInThirteen: Any): Int = when(plzPassInThirteen) {
    is Int -&amp;gt; plzPassInThirteen + 29
    else -&amp;gt; 666
}
println(getTheAnswer(13)) // 42
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This example is identical to the  previously seen if statement but doesn’t it read much more beautifully?&lt;/p&gt;

&lt;p&gt;Now that we have touched &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; together we can take a small detour and talk about &lt;code class=&quot;highlighter-rouge&quot;&gt;sealed classes&lt;/code&gt;. Kotlin has a notion of a &lt;code class=&quot;highlighter-rouge&quot;&gt;sealed class&lt;/code&gt; that we can think of as a wrapper of some subclasses.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sealed class Seal
class SeaLion: Seal()
class Walrus: Seal()
class KissFromARose(val film: String): Seal()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we have this kind of construct, a sealed superclass and three children that extend it we can nicely handle our polymorphic cases with a combination of &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun getTheAnswer(songOrAnimal: Seal): Unit = when(songOrAnimal) {
    is SeaLion -&amp;gt; println(&quot;Animal&quot;)
    is Walrus -&amp;gt; println(&quot;Song by Beatles&quot;)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our new and modified &lt;code class=&quot;highlighter-rouge&quot;&gt;getTheAnswer&lt;/code&gt; function does not compile. We will get a sguiggly line under our &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; telling us that a &lt;code class=&quot;highlighter-rouge&quot;&gt;when expression must be exhaustive&lt;/code&gt;. It will even tell us which subclass we are missing from our &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statement. If we add our &lt;code class=&quot;highlighter-rouge&quot;&gt;KissFromARose&lt;/code&gt; in there, all &lt;em&gt;will be grand&lt;/em&gt;, like the Irish say. We also get the added benefit of not needing to add an else clause in there; Kotlin already knows we have covered all the cases.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun getTheAnswer(songOrAnimal: Seal): Unit = when(songOrAnimal) {
    is SeaLion -&amp;gt; println(&quot;Animal&quot;)
    is Walrus -&amp;gt; println(&quot;Song by Beatles&quot;)
    is KissFromARose -&amp;gt; (&quot;Heidi Klum&quot;)
}
println(getTheAnswer(Walrus())) // Song by Beatles
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The above compiles nicely and gives us a peace of mind at night when we go through the codebase in our subconscious mind. It is good practice to omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; line when possible if you are using sealed classes. This way every new subclass will make your compilation fail fast.&lt;/p&gt;

&lt;p&gt;At times, we also need to do some casting of types. In Kotlin this is done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; keyword. When that is appended to a value, we can assume that it is casted to that type. This little functionality also has some niceties built into it. In the Java world you might have gotten used to assigning a new variable for the casted object, but fear not, in Kotlin there is no need for that. When the &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; has been thrown around once, the compiler knows that our variable is casted to something else. There is no need for any more huffing and puffing around it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val possiblyString: Any = &quot;definitely&quot;
possiblyString.capitalize()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Again the example above will fail to compile. &lt;code class=&quot;highlighter-rouge&quot;&gt;capitalize()&lt;/code&gt; is underlined squiggly and the compiler tells us that there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Unresolved reference&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;resolver type mismatch&lt;/code&gt;. That makes perfect sense since we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt; does not have &lt;code class=&quot;highlighter-rouge&quot;&gt;capitalize()&lt;/code&gt; function. The fix for this is easy-peasy. We cast our variable to a String and magically our capitalization works like a charm.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val possiblyString: Any = &quot;definitely&quot;
possiblyString as String
possiblyString.capitalize()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Smart casts in Kotlin are done nicely and will help you along the way, especially in cases where you stumble upon a lot of Generics, Object orientation and deep inheritance hierarchies. If you are lucky to not see these kind of lines in your codebase, I am a little bit of jealous of you.&lt;/p&gt;

&lt;p&gt;The last thing about types in Kotlin is the type alias. Sometimes, especially when you get a complex function type, type declarations grow into massive proportions. Type aliases can be used to shorten a function type or some generic type with multiple type parameters. Aliases don’t go as far as checking the actual implementation, they are just synonyms to the underlying type. Kotlin doesn’t quite have &lt;code class=&quot;highlighter-rouge&quot;&gt;newtype&lt;/code&gt; like Haskell does, but type aliases are some of the way there. Using Kotlin and type aliases, we still might stumble upon a &lt;a href=&quot;https://github.com/mdgriffith/mechanical-elephant-hakyll/blob/master/thoughts/2015-08-10-the-pratical-benefits-of-haskell-typesystem.markdown&quot;&gt;Mars Climate Orbiter disaster&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;typealias Miles = Int
typealias Kilometres = Int

fun calculateWithProperValues(first: Kilometres, second: Kilometres): Unit {
    println(&quot;lol miles. Next you'll probably be talking about feet and pounds.&quot;)
}

val one: Miles = 2
val two: Kilometres = 1
calculateWithProperValues(one,two)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is valid code in Kotlin; it compiles and runs nicely. So, in this case our typealias doesn’t actually offer much extra benefit for us. The real benefit of type aliases comes in cases like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;typealias LoL&amp;lt;K&amp;gt; = List&amp;lt;List&amp;lt;K&amp;gt;&amp;gt;
typealias ComplexFunction&amp;lt;T,K&amp;gt; = (list: List&amp;lt;T&amp;gt;, map: Map&amp;lt;T, K&amp;gt;) -&amp;gt; LoL&amp;lt;K&amp;gt;

val thing: ComplexFunction&amp;lt;String, Int&amp;gt; = {list, map -&amp;gt; list.map { listOf(map.getValue(it)) }}
fun doSomethingWithListOfLists(fn: ComplexFunction&amp;lt;String, Int&amp;gt;, list: List&amp;lt;String&amp;gt;, map: Map&amp;lt;String, Int&amp;gt;): LoL&amp;lt;Int&amp;gt; = fn(list, map)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That guy is still long, but at least it’s a little bit shorter than when typing in the full lambda signature and return value. When using type aliases, you can easily go a bit overboard and lose the underlying types of your functions. When used properly and with good forethought, type aliases will give you a nice and readable type signature for your APIs.&lt;/p&gt;

&lt;p&gt;We’ve now touched on collections, null safety, and type safety in Kotlin. This brings us to the end of &lt;strong&gt;Introduction to Kotlin Part 2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-1.html&quot;&gt;&lt;strong&gt;Introduction to Kotlin Part 1&lt;/strong&gt;&lt;/a&gt;, where we introduced syntax, variables, functions, and classes, can be found here.&lt;/p&gt;

&lt;p&gt;There are still a few topics to discuss, namely generics and delegates, extension functions and functional style with higher order functions, as well as Kotlin’s beautiful capability to create typesafe DSLs. Those will be covered in &lt;strong&gt;&lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-3.html&quot;&gt;Part 3&lt;/a&gt;&lt;/strong&gt;. Now it is time to jump back into the IDE and continue coding away.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Because regardless of all the helpers it is still a difficult topic.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;An infix function in Kotlin is a function that takes one parameter and is a member function or an extension function. In Kotlin &lt;code class=&quot;highlighter-rouge&quot;&gt;1.to(2)&lt;/code&gt; can be rewritten like &lt;code class=&quot;highlighter-rouge&quot;&gt;1 to 2&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; is an extension function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Pair&lt;/code&gt; class. In Kotlin maps take a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;Pair&lt;/code&gt;s as their items. Yes, in theory you can write a whole application without the need to touch the &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; character at all! (Though where’s the fun with that, since IntelliJ can nearly read your mind and autocomplete everything.)&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Yes, in Kotlin you can define function anywhere, even within other functions. This comes very handy when you are building complex &lt;em&gt;closure structures&lt;/em&gt; and want to keep your functions in order by naming them well.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;The function call looks a bit funky when you remember that it takes two params. In Kotlin, if the second (well, last) argument is a function, we can close the parentheses and make the lambda look like it is outside of them. It is still the same function we are calling and the lambda is still the second parameter we are passing in. This makes Kotlin a brilliant language to do DSLs since we can create these kind of blocks of code very easily.&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-2.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-2.html</guid>

        <category>Kotlin</category>

        <category>JVM</category>


      </item>

      <item>
        <title>Introduction to Kotlin - Syntax, Variables, Functions &amp; Classes</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This article was originally published in &lt;a href=&quot;https://www.codementor.io/jussihallila/introduction-to-kotlin-part-1-9mt0ony0g&quot;&gt;Codementor.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;introduction-to-kotlin&quot;&gt;Introduction to Kotlin&lt;/h2&gt;

&lt;p&gt;Kotlin is the new lovechild of the JVM developers’ world.&lt;/p&gt;

&lt;p&gt;Google promoted Kotlin as a first class language on its Java-based Android platform &lt;a href=&quot;https://techcrunch.com/2017/05/17/google-makes-kotlin-a-first-class-language-for-writing-android-apps/&quot;&gt;back in May&lt;/a&gt;. Since then, the whole development world has been wondering: what is this language? Kotlin has been around for a few years and has been running on production systems, after the languages 1.0 release in February 2016, for a year or so. The language has received a lot of praise and loving words from the developer community. It is a breath of fresh air, a good upgrade to systems running older versions of Java, and still somehow an old dog in a familiar playing field.&lt;/p&gt;

&lt;p&gt;In the next three tutorials, we will introduce you to the Kotlin language, starting from basics and making our way through the more difficult aspects of it. In this post, we will &lt;strong&gt;cover the syntax and other basic building blocks&lt;/strong&gt; of the language. In &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-2.html&quot;&gt;&lt;strong&gt;Introduction to Kotlin Part 2&lt;/strong&gt;&lt;/a&gt;, we will touch on &lt;strong&gt;variables, functions, classes, interfaces, and objects&lt;/strong&gt;. Finally, in &lt;a href=&quot;/2017/07/04/introduction-to-kotlin-part-3.html&quot;&gt;&lt;strong&gt;Part 3&lt;/strong&gt;&lt;/a&gt; we’ll look at a few examples about control flow in Kotlin.&lt;/p&gt;

&lt;h2 id=&quot;what-is-kotlin-what-does-it-bring-that-the-jvm-doesnt-already-have&quot;&gt;What is Kotlin? What does it bring that the JVM doesn’t already have?&lt;/h2&gt;

&lt;h3 id=&quot;kotlin-vs-java&quot;&gt;Kotlin vs. Java&lt;/h3&gt;
&lt;p&gt;There are a few approaches we can take when introducing Kotlin. We can discuss it through  Java, the language Kotlin needs to be based on due to its JVM runtime, or we can do it through Scala, the language Kotlin is heavily influenced by. There is no doubt that Kotlin is better than Java. It is much safer and more concise. It provides you with a bunch of additions to your standard Java language and enhances a few bits and pieces that Java developers have grown to dislike. Additions include things like null safety, extension functions, data classes, objects, first class functions as well as extensive and expressive lambdas. Kotlin also enhances Java’s type inference and type system and takes massive leaps forward with collections.&lt;/p&gt;

&lt;h3 id=&quot;kotlin-vs-scala&quot;&gt;Kotlin vs. Scala&lt;/h3&gt;
&lt;p&gt;Perhaps, it’s better to compare Kotlin against Scala.  This comparison might scare some of you quite a bit because Scala has the reputation of being simultaneously intriguing and frightening. It heavily introduces functional programming paradigm to you while still mixing it into familiar object orientation (hence in an awfully lot of cases creating a mishmash of advanced techniques from both paradigms), brings in some new build tools, and gives your internal flow state a frustrating break every now and then due to long compile times.&lt;/p&gt;

&lt;p&gt;I come bearing both  good news and bad news. Let’s start with the bad news:
Bad news is that Kotlin is similar to Scala, it follows the same path as Scala does&lt;/p&gt;

&lt;p&gt;The good news: luckily, it’s only slightly similar to Scala in every aspect.&lt;/p&gt;

&lt;h3 id=&quot;kotlin--functional-programming-paradigm&quot;&gt;Kotlin &amp;amp; Functional Programming Paradigm&lt;/h3&gt;

&lt;p&gt;The functional programming paradigm is big part of Kotlin as well. Luckily, it doesn’t go into the higher-kinded types, monadic do-continuations, or advanced type theory concepts that make you seek out &lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;Bartosz Milewski and his brilliant book on Category Theory&lt;/a&gt;. Kotlin introduces easy-to-use collection manipulation functions and functional pipelines for you. You will get your maps, filters, and folds, which &lt;em&gt;in most cases&lt;/em&gt; are enough to get to the functional programming path.&lt;/p&gt;

&lt;p&gt;Java devs that have been lucky enough to jump into Java 8 (hugs and kisses to you Android and/or enterprise developers) will be familiar with the these basics and will feel right at home when they jump into Kotlin. They will also find conciseness and safety of better type system, which will spark their first crush towards the language. It is just so pretty and seamless to pipe these functions together and build a clean pipeline. And when you come back to it after a few weeks, you’ll still feel like you can somewhat understand it. Smiles all around. :)&lt;/p&gt;

&lt;h3 id=&quot;build-processes&quot;&gt;Build Processes&lt;/h3&gt;
&lt;p&gt;When developing in Kotlin, your build processes will be  more or less the same as in your old Java application. Since you are already familiar with these, there is no need to learn anything new. The build process and build tools introduced by Kotlin can be described in two words:  Gradle/Maven Plugin.
You can introduce the language to your codebase by adding the Kotlin plugin to your Gradle/Maven build script and making sure it points to the correct folder that defines your Kotlin files —adding Kotlin to your code base is just a quick Ctrl-C + Ctrl-V away. More information on how to make this happen can be found from the official Kotlin documentation:  &lt;a href=&quot;https://kotlinlang.org/docs/reference/using-maven.html&quot;&gt;Maven&lt;/a&gt;/&lt;a href=&quot;https://kotlinlang.org/docs/reference/using-gradle.html&quot;&gt;Gradle&lt;/a&gt;. That is literally it, it will just &lt;em&gt;miraculously work&lt;/em&gt;, kinda like Apple devices &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and Kotlin also clicks into place on top of your tooling seamlessly. Kotlin is made by JetBrains, the same people who created IntelliJ, &lt;em&gt;the best IDE the world has ever seen&lt;/em&gt;, so the tooling better be spot on. And oh boy is it. IntelliJ nowadays comes bundled with a Kotlin plugin that gives you all the good stuff you expect to see when spitting out Java code. You will get brilliant intellisense, built in integration to build processes, and smart suggestions on how to make your code better — all wrapped up in a pretty and functional package.&lt;/p&gt;

&lt;p&gt;Naturally, you’d also have plugins for your favourite IDE, if IntelliJ is not your cup of tea. These tools make Kotlin a breeze to develop in. That and the safety nets smartly built into the language make certain that there is a lesser chance of blushing from bad code quality when you’re showing your 4-year-old codebase to your coworker/boss/OS community/spouse.&lt;/p&gt;

&lt;p&gt;As a language, Kotlin is very close to Java. This gives users a few nice little perks. For example, the interoperability between Java and Kotlin is brilliant —you can jump from one file to the next and change the language with zero barriers. Introducing Kotlin to your code base can be done incrementally because your old Java code can live side-by-side with your newer Kotlin code. Another perk we get from not deviating too far from Java is the whole compile process. Compiling Kotlin code to JVM bytecode does not take that long. &lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d&quot;&gt;Folks from Keepsafe made a nice little test&lt;/a&gt; to compare their Kotlin codebase with Java. Their results show that Kotlin compile times are actually &lt;strong&gt;faster&lt;/strong&gt; on incremental builds than Java compile times. Blazing fast!&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Not sad at all.&lt;/p&gt;

&lt;h2 id=&quot;kotlin-syntax&quot;&gt;Kotlin syntax&lt;/h2&gt;

&lt;p&gt;A great man once said &lt;strong&gt;talk is cheap, show me the code&lt;/strong&gt;. So let’s take a shallow dive into Kotlin.&lt;/p&gt;

&lt;p&gt;To make all blog post gods happy, we are going to start off with a simple hello world. In Kotlin, it goes a bit like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;print(&quot;Hello World&quot;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now that we’ve got that out of the way, we can do some pseudo analysis on it. The syntax seems familiar so let’s assume parenthesis means a function call. There is no semicolon to end the line, which is neat. Oh, this &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; thing must print out something. That’s pretty much everything we can get out of this single line.&lt;/p&gt;

&lt;p&gt;Alright, now that the blog gods are happy we can move forward.&lt;/p&gt;

&lt;h3 id=&quot;kotlin-variables&quot;&gt;Kotlin Variables&lt;/h3&gt;

&lt;p&gt;Variable declaration in Kotlin can happen in a few different ways. We have keywords &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;. These two look similar but have one major difference:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Values&lt;/em&gt; declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; are immutable (well, read-only) and you can only assign a value to them exactly one time. That time comes when you are declaring and creating the value or when you are assigning a value to already declared but not created one. &lt;em&gt;Variables&lt;/em&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; are mutable and can be reassigned. The preferred way is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;s everywhere that is possible. This way the codebase will be easier to handle and reason about.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val hello: String = &quot;hello&quot;
val world: String
world = &quot;world&quot;

var helloWorld: String = &quot;Hello&quot;
helloWorld = &quot;Hello World&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice how the type of the variable is defined after the variable, separated by a colon. There’s a good reason behind this. The compiler can now decide whether or not to &lt;strong&gt;infer&lt;/strong&gt; the type, which means that Kotlin has a more powerful type inference than Java. You can actually leave the type declaration out completely and the compiler will know what you mean.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val hell0 = &quot;hi&quot;
val w0rld = &quot;earth&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This only works when the value, and therefore the type of the value, is known.&lt;/p&gt;

&lt;h3 id=&quot;funs-funs-funs&quot;&gt;Funs, Funs, Funs&lt;/h3&gt;

&lt;p&gt;How about functions? It’s always fun to write functions in Kotlin. Since we use the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;fun&lt;/code&gt;to declare them, it’s bound to be fun! (ha ha. :( )&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;// No return type. (can also be --&amp;gt; fun sayIt (a: String): Unit)
fun sayIt (a: String) {
    println(a)
}

// With return type
fun returnIt (returnable: String): String {
    return returnable
}

// As a `single-expression function with inferred return type and automatic return
fun returnIt2 (turntable: String) =
    turntable
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Type declaration follows the same pattern here —it comes last. In our first, side-effectful, function, we are not returning anything so we can omit the type, which in this case would be &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt;. In the second function, we defined that we must return a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; and we did, using the trusty &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword. Last one is a bit more puzzling. There are no curly brackets, just an equal sign. That means our &lt;code class=&quot;highlighter-rouge&quot;&gt;fun&lt;/code&gt; is an &lt;strong&gt;expression&lt;/strong&gt; and it will return automatically.&lt;/p&gt;

&lt;p&gt;When you’re just starting to build up functional pipelines, most people tend to lean towards these expressions. It is a way to force your functions to do &lt;strong&gt;one thing, and do it well&lt;/strong&gt;. As you can see, the return type in &lt;strong&gt;expressions&lt;/strong&gt; is optional and can be omitted or left in place, whatever makes you happy (rule of thumb: in long expressions, put it in, in shorter ones, it can be omitted).&lt;/p&gt;

&lt;p&gt;Kotlin also introduces the concept of optional and named function parameters. This is useful especially  if your functions grow into a monster of a lot of same types and multiple different parameters.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fun optFun(isItFun: Boolean = true, whyIsItFun: String = &quot;Because&quot;) = if (isItFun) whyIsItFun else &quot;It's not fun&quot;

println(optFun()) // Because
println(optFun(false)) // It’s not fun
println(optFun(whyIsItFun = &quot;It's Summer!&quot;)) // It's Summer!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this snippet, we defined our function parameters with default values. When this is done, we can just call the function with zero, one, or both of its arguments. If arguments are omitted, then the default values kick in. As you can see, we can also call the function while naming the arguments. This gives us more insight into what we are calling with which value and possibility to target individual optional argument. Note that optional arguments work for both class constructors as well as functions.&lt;/p&gt;

&lt;p&gt;There are also neat little things like extension functions and infix functions as well as operator overloading in the language. These are interesting aspects of Kotlin that make writing the language more pleasant. These functions give us control freaks more opportunities to write &lt;strong&gt;beautiful code&lt;/strong&gt; and &lt;strong&gt;naturally readable structures&lt;/strong&gt;. That is a &lt;a href=&quot;introduction-to-kotlin-part-3&quot;&gt;different topic for another article though&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;classes-interfaces-and-objects&quot;&gt;Classes, Interfaces, and Objects&lt;/h3&gt;

&lt;p&gt;Like Java, Kotlin has classes and interfaces. Unlike Java, Kotlin instances can all live in the same file and don’t need their own. This decision made by the Kotlin team has made code organization more pleasant and language more concise. Let’s tackle classes first.&lt;/p&gt;

&lt;h4 id=&quot;classes&quot;&gt;Classes&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class SimpleClass

// Also --&amp;gt; class constructor SimpleClassWithConstructor(val chop: String)
class SimpleClassWithConstructor(val chop: String)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In Kotlin, there are a handful of ways to create classes. The first example in the snippet reveals a few things to us:
Naming convention starts with a Capital letter
There are no curly braces
There is no visibility modifier in this example
We still use the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;In Kotlin we instantiate these classes nearly the same way as we do in Java, except, we omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword. Like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val simpleClass = SimpleClass()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We have now instantiated a class that we can do nothing with. Good job!&lt;/p&gt;

&lt;p&gt;The second example is similar, but it has a constructor. Notice how the constructor is bundled into the same line as the class (you can leave the &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; keyword out in most cases, it only needs to be added if the class has annotations or visibility modifiers), another way to make Kotlin code more succinct. When we instantiate this class, we need to pass in the value for &lt;code class=&quot;highlighter-rouge&quot;&gt;chop&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val lamb = SimpleClassWithConstructor(&quot;Hello&quot;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Properties in Kotlin are public by default, so there is a simple way to access this property:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;println(lamb.chop)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This class doesn’t have any functionality; it is just a vessel for our data. We can add some functionality in there by defining &lt;code class=&quot;highlighter-rouge&quot;&gt;fun&lt;/code&gt;s inside the class. In this case, we need to attach those beautiful curly braces into our declaration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class SimpleClassWithConstructor(val chop: String) {
    fun sayItMate(): String = chop + &quot;, mate&quot;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can more or less dump the same things you would in Java to a class here. We can attach &lt;strong&gt;properties&lt;/strong&gt;, other &lt;strong&gt;classes&lt;/strong&gt;, extra &lt;strong&gt;constructors&lt;/strong&gt; or &lt;strong&gt;initialization blocks&lt;/strong&gt; in and we can assign visibility modifiers to all of them individually.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt; blocks in Kotlin can be used to do things you would normally do with your Java constructor. If you want to create a class within a class, you can mark it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;inner&lt;/code&gt; keyword to be able to access members of the surrounding class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class Kenny(val celly: String) {
    lateinit var wheel: CanadianPerson
    val friend: String

    init {
        friend = &quot;buddy&quot;
    }

    fun initializeWheel (wheeler: String) {
        wheel = CanadianPerson(wheeler)
    }

    inner class CanadianPerson(val snipe: String)

    // The dollar sign makes use of string interpolation and replaces the $-prefixed property name with toString implementation defined in that property.
    fun sayItCanadianWay(): String = &quot;${wheel.snipe} $celly, $friend&quot;
}

val d = Kenny(&quot;friend&quot;)
d.initializeWheel(&quot;I’m not&quot;)
print(d.sayItCanadianWay()) // I'm not your friend, buddy
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here, we have a few moving parts. By using the &lt;code class=&quot;highlighter-rouge&quot;&gt;lateinit&lt;/code&gt; keyword, we can tell the compiler that this property is not null, even though we don’t initialize it right away. This is useful for cases where we don’t initialize our properties in the constructor but use, for example, a dependency injection framework to assign values to them. Note that our &lt;code class=&quot;highlighter-rouge&quot;&gt;lateinit&lt;/code&gt; property is mutable  — this is a must.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; is equivalent to the constructor block in Java classes. In there, we can perform needed actions when we instantiate the class. In this case, we assign a String to our property, something that could be done as a joined assignment as well.&lt;/p&gt;

&lt;p&gt;Next, we have a function that finally assigns a value to our &lt;code class=&quot;highlighter-rouge&quot;&gt;lateinit&lt;/code&gt; property, instantiating an inner class &lt;code class=&quot;highlighter-rouge&quot;&gt;CanadianPerson&lt;/code&gt;. This inner class is just a vessel to our data once again.&lt;/p&gt;

&lt;p&gt;Finally, we’ll have a function that we invoke: this function will return a String, which it parsed together using &lt;strong&gt;string interpolation&lt;/strong&gt;. The dollar sign character can be used in Strings to replace the $-prefixed property name with its toString implementation, defined in that property.&lt;/p&gt;

&lt;p&gt;When adding additional constructors to the class, we need to make them call the original constructor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;class DoubleTrouble(val str: String){
    constructor(lamb: SimpleClassWithConstructor): this(lamb.chop)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;data-classes&quot;&gt;Data classes&lt;/h4&gt;

&lt;p&gt;Now that we have gone through classes with some functionality in them, we can take a look at some simpler classes that do nothing other than hold our data.&lt;/p&gt;

&lt;p&gt;For these kind of &lt;strong&gt;data transfer objects&lt;/strong&gt;, Kotlin has introduced a keyword to define them: &lt;code class=&quot;highlighter-rouge&quot;&gt;data class&lt;/code&gt;. It differs from standard classes in a few ways. A &lt;code class=&quot;highlighter-rouge&quot;&gt;data class&lt;/code&gt; automatically generates &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; functions. The first three of these are familiar for Java devs, the fourth one is a nice addition that helps us create similar objects from our read-only data class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; function can be used to do that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;data class DataClass(val str: String, val num: Int)
val daata = DataClass(&quot;Hello&quot;, 3)
val peeta = daata.copy(str = &quot;Goodbye&quot;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In this case, our peeta object contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;num&lt;/code&gt; 3 and an &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; “Goodbye”. Neat!&lt;/p&gt;

&lt;p&gt;We also get &lt;code class=&quot;highlighter-rouge&quot;&gt;component&lt;/code&gt; functions to the data class for free. These component functions are a way to access the data within our data class via destructuring. This helps take individual properties from our data classes with a &lt;em&gt;succinct&lt;/em&gt; one line call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val (str, num) = peeta
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With this trick, we have variables &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;num&lt;/code&gt; and their values are “Goodbye” and 3 respectively. Note that the order of destructuring variables depends on the order of the properties in our data class; the names don’t actually matter at all.&lt;/p&gt;

&lt;p&gt;Two other top level structures are &lt;code class=&quot;highlighter-rouge&quot;&gt;interfaces&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;objects&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h4&gt;

&lt;p&gt;Interfaces in Kotlin don’t differ that much from the Java world. One nice thing is that you can have abstract properties in your interfaces as well. These properties need to be initialized in the implementing class to honor the contract of the interface.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;interface Sayer {
    val value: String
    fun sayIt(): String
}

class SayerClass: Sayer{
    override val value: String = &quot;Hello&quot;
    override fun sayIt(): String = &quot;$value, world&quot;
}

println(SayerClass().sayIt()) // Hello, world
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, this is very similar to Java. Like Java 8, Kotlin also can have default implementations in interfaces. We can achieve the same thing shown above with this interface.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;interface Sayer {
    val value: String
    fun sayIt(): String {
        return &quot;$value, world&quot;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Using this, we don’t have to override the function in our implementing class. Notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;override&lt;/code&gt; keyword is mandatory in Kotlin. This helps us, users of someone else’s’ code, appreciate the fact that the contract of the function/property comes from somewhere outside of  our implementation. Good way to dodge  responsibility XD&lt;/p&gt;

&lt;h4 id=&quot;objects&quot;&gt;Objects&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;object SingletonClass{
    fun sayIt(): String = &quot;Hello world&quot;
}

class CompaniedClass(val str: String){
    companion object Printer{
        fun sayIt(): String = &quot;Hello world&quot;
    }
}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What is this then? In Kotlin, you can create singletons with &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; keyword. This is a nice pattern to store, for example, a larger context of your application in a single place. You could instantiate a bunch of complex classes and hold those objects in a place where they can be accessed easily. You can access functions in objects by calling their names directly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;SingletonClass.sayIt() // Hello world
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The companion object is a slightly different beast. It is defined within a class, which is still a singleton, and it can be accessed using the &lt;strong&gt;name of the wrapping class&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;CompaniedClass.sayIt() // Hello world
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s a short introduction to classes in Kotlin. There are quite a bit more we can discuss on classes, but to keep this post short, we’ll postpone &lt;code class=&quot;highlighter-rouge&quot;&gt;visibility modifiers&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sealed classes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;generics&lt;/code&gt;, and others for a future post.&lt;/p&gt;

&lt;h3 id=&quot;control-flow-if-when-and-for&quot;&gt;Control flow (if, when, and for)&lt;/h3&gt;

&lt;p&gt;Now that we have variables, functions, and classes nailed down with a decorated fluffy hammer, we can take a short look at some control structures in Kotlin.&lt;/p&gt;

&lt;h4 id=&quot;if&quot;&gt;If&lt;/h4&gt;

&lt;p&gt;If statements in Kotlin work more or less the same way as in Java. There is one big and important difference that is worthy to be pointed out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val three = 4
if (three != 3) {
    println(&quot;Liar!&quot;)
} else{
    println(&quot;Good job&quot;)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This looks exactly the same as in Java. Suprise! It is! The next one is a bit more puzzling.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val three = 4
val goodOrNot = if(three != 3) {
    &quot;Liar!&quot;
} else{
    &quot;Good job&quot;
}
println(goodOrNot) // Liar!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If statements in Kotlin are actually expressions. They return the last value within their block, so in this case, the String value written in it. This brings a few caveats with it. Because you can use these &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s the same way as ternary (the trusted &lt;code class=&quot;highlighter-rouge&quot;&gt;val thing = three &amp;gt; 4 ? &quot;What?&quot; : &quot;Nowei!?&quot;&lt;/code&gt;) operators, Kotlin guys have actually omitted ternary completely. Therefore, if you are trying to hunt that question mark on your keyboard, don’t. There is a whole different meaning to that symbol in Kotlin. We’ll touch on question marks in the next post.&lt;/p&gt;

&lt;h4 id=&quot;when&quot;&gt;When&lt;/h4&gt;

&lt;p&gt;If clauses’ best friend &lt;code class=&quot;highlighter-rouge&quot;&gt;switch-case&lt;/code&gt; has the same fate as ternary operator. It has been replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; statement in Kotlin.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;when (three) {
    3 -&amp;gt; print(&quot;three is three&quot;)
    2 -&amp;gt; print(&quot;three is two?!?&quot;)
    else -&amp;gt; print(&quot;I don't know what's going on anymore&quot;)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; clause replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; case, and arrow replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; character. Keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; is not needed anymore since &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; expression will stop when it hits the first true case. We can also wrap each of these cases with squiggly brackets — in those cases, just like in &lt;code class=&quot;highlighter-rouge&quot;&gt;if expression&lt;/code&gt;, the last statement of the block will be returned. There are a few interesting aspects of these &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; expressions. They can be evaluated using any kind of expressions, many cases can be bundled together and for numeric values, you can use ranges to determine the clause.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;when (three) {
    3 -&amp;gt; print(&quot;three is three&quot;)
    1,2 -&amp;gt; print(&quot;three is two or one?!?&quot;)
    in 4..10 -&amp;gt; print(&quot;What? Three can't be between 4 and 10!&quot;)
    else -&amp;gt; print(&quot;I don't know what's going on anymore&quot;)
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can also omit the parenthesis and the passed in value from our &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; completely and squint really hard. If we look from the correct angle, we can make our when expressions look like &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;s and subsequently replace them completely.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;val three = 4
val goodOrNot = when {
    three != 3 -&amp;gt; &quot;Liar!&quot;
    else -&amp;gt; &quot;Good job&quot;
}
println(goodOrNot) // Liar!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4 id=&quot;for&quot;&gt;For&lt;/h4&gt;

&lt;p&gt;Hold up! You must be thinking. “What’s that double dot in there that we skipped past completely?”. That’s a range expression in Kotlin, it’s one of the building blocks for &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; statements in the language. Now, after a while (not the loop [hehe]), for loops won’t play a big part in the language since the collection extension functions make simple loops in many cases useless. Let’s skim through them regardless to wrap up this article.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;for (i in 1..10) {
    print(i)
} // 12345678910

for (i in 1..10 step 2) {
    print(i)
} // 13579

val lst = listOf(1,2,3)
for (i in lst){
    print(i)
} // 123
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That looks straight forward enough. In the first one, we used the magical &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; keyword to take a value from &lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt; that we defined with double-dot and assigned that to &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;. Next loop adds a &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; keyword which indicates that we want to take every other value from the range. The third example loop takes values from a list (that we have created with a function call to &lt;code class=&quot;highlighter-rouge&quot;&gt;listOf&lt;/code&gt;) and prints them out. That is more or less for-loops in Kotlin.&lt;/p&gt;

&lt;p&gt;Those are the basic building blocks for the Kotlin language. With these, you can start to write and play around with the language. We left out some essentials like lambdas, null-safety, and types. We didn’t touch on collections yet either since they need their own chapter and is better to touch on after we’ve covered lambdas. Hopefully by the end of this post, you now have an idea about Kotlin and its basic syntax. In the next article, we will ramp up the magic and expose more aspects that make Kotlin such a loved language amongst developers targeting JVM.&lt;/p&gt;

&lt;p&gt;Don’t forget to check out the other posts from this series. In &lt;a href=&quot;https://www.codementor.io/jussihallila/introduction-to-kotlin-part-2-9oybmr9rb&quot;&gt;&lt;strong&gt;Introduction to Kotlin Part 2&lt;/strong&gt;&lt;/a&gt;, I will introduce you to null safety, lambdas, collections, and types as well as few handy utility functions in Kotlin language.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.codementor.io/jussihallila/introduction-to-kotlin-part-3-9p0k7ivqj&quot;&gt;&lt;strong&gt;Part 3&lt;/strong&gt;&lt;/a&gt;, we will wrap up the introduction with extension functions, higher order functions, and functional style, and finally introduce you to generics and delegates.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Only in unison with other Apple devices (apart from the latest generation, which &lt;em&gt;sometimes works&lt;/em&gt;). Actually, let’s say it works better than Apple devices, because that’s closer to truth. And Kotlin is also pretty, like Apple devices, yes. Let’s say that Kotlin is pretty like Apple devices and &lt;em&gt;just works&lt;/em&gt; like anything Linus has made. That’s a much better analogy.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Yes, with an asterisk naturally. And yes yes Go people it is not the fastest in the universe, just remember we are still running on a JVM. Let’s hope your dependency URLs stay online.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-1.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/04/introduction-to-kotlin-part-1.html</guid>

        <category>Kotlin</category>

        <category>JVM</category>


      </item>

      <item>
        <title>Kotlin - From Zero to Eleven</title>
        <description>&lt;h2 id=&quot;dublin-kotliners-kickoff-meeting&quot;&gt;Dublin Kotliners kickoff meeting&lt;/h2&gt;

&lt;p&gt;On the American independence day I had the opportunity to host our first meetup around Kotlin language in Dublin, Ireland. I don’t think there is a better way to celebrate American independence day than talk about Russian built programming language.&lt;/p&gt;

&lt;p&gt;Below is an iFrame &lt;a href=&quot;http://jussi.hallila.com/kotlin_for_java_devs/&quot;&gt;the slides from my introductory presentation to the language&lt;/a&gt;. The code examples from these slides can be found from &lt;a href=&quot;https://github.com/Xantier/kotlin_for_java_devs&quot;&gt;the Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;812&quot; height=&quot;600&quot; src=&quot;http://jussi.hallila.com/kotlin_for_java_devs/&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/02/kotlin-from-zero-to-eleven.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/07/02/kotlin-from-zero-to-eleven.html</guid>

        <category>Kotlin</category>

        <category>JVM</category>


      </item>

      <item>
        <title>Kotlin Collection Extensions Cheat Sheet</title>
        <description>&lt;h2 id=&quot;kotlin-collection-extensions-cheatsheet&quot;&gt;Kotlin Collection Extensions Cheatsheet&lt;/h2&gt;

&lt;p&gt;Kotlin makes functional collections handling a breeze. I’ve created a handy cheat to line out all the most important items of Kotlin’s brilliant extensions on the standard library.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jussi.hallila.com/Kollections&quot;&gt;You can find the cheat sheet from here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is an iFrame version with worse readability as well if that is your cup of tea.&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;812&quot; height=&quot;600&quot; src=&quot;http://jussi.hallila.com/Kollections&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/06/13/Kotlin-Collection-Extensions.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/06/13/Kotlin-Collection-Extensions.html</guid>

        <category>Kotlin</category>

        <category>JVM</category>


      </item>

      <item>
        <title>Using Mandrill with JMeter as your spam machine</title>
        <description>&lt;p&gt;Recently we had the need to send a bunch of Emails to our clients. By a bunch I mean into tens of thousands. For this task we had an account with &lt;a href=&quot;https://mailchimp.com/&quot;&gt;Mailchimp&lt;/a&gt; and chose &lt;a href=&quot;https://mandrillapp.com/&quot;&gt;Mandrill&lt;/a&gt; to be the correct tool for this job.&lt;/p&gt;

&lt;p&gt;Due to the ad-hoc and potential once-off nature of this task the hackier the solution the better. Naturally. The outgoing email that we had was an HTML file with quite a few images. For this to work we needed to upload images to host them somewhere and then reference them in the final HTML email. Luckily Mailchimp has the possibility to import a template and they will automatically host images for you. Mandrill integrates well with Mailchimp and you can actually &lt;a href=&quot;https://mandrill.zendesk.com/hc/en-us/articles/205583097-How-do-I-add-a-MailChimp-template-to-my-Mandrill-account-&quot;&gt;push the saved Mailchimp template to be used with Mandrill&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mandrill has quite a nice API documentation how to make use of templates etc. and send out emails using their JSON API. Our use case was to use a predefined template and swap in some variables within the message, these variables coming from a flat file. Since we are already using JMeter for our performance tests and our ops people are familiar with it, we decided to do this ad-hoc operation with it as well. Building a node.js (or any other) solution for this is fairly trivial in the if we decide that an email spamming route is a good way for us to go forward.&lt;/p&gt;

&lt;p&gt;How did we set this up then?&lt;/p&gt;

&lt;p&gt;Here is a bunch of images that we used to spam a ton of people with emails.&lt;/p&gt;

&lt;p&gt;JMeter scenario setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jussi.hallila.com/static/img/jmeter/jmeter.png&quot; alt=&quot;Simplified JMeter scenario&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We wanted to use a CSV file as our datasource for the dynamic content in our message. We also wanted to send a message to all users that were present in the CSV file so we needed a looping mechanism to handle that. Here is a screenshot of the CSV Data Set config:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jussi.hallila.com/static/img/jmeter/csv-config.png&quot; alt=&quot;JMeter CSV Data Set Config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file itself is extremely simple, containing only 2 comma separated fields, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;jussi@hallila.com,Jussi Hallila
example@example.com,Ex Ample
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And here is the while loop with a simple “exists/doesn’t exist” check:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jussi.hallila.com/static/img/jmeter/while-loop.png&quot; alt=&quot;JMeter While loop config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The check is not necessarily even needed because our CSV data set config will take care of stopping our thread if it hits EOF.&lt;/p&gt;

&lt;p&gt;Few things to note regarding variable naming. We can mix and match &lt;code class=&quot;highlighter-rouge&quot;&gt;Mandrill&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;JMeter&lt;/code&gt; variables in our JSON. Mandrill expects variables to indicated with a pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;*|VARIABLE_NAME|*&lt;/code&gt;, JMeter uses pattern &lt;code class=&quot;highlighter-rouge&quot;&gt;${VARIABLE_NAME}&lt;/code&gt;. JMeter variables will be replaced directly from the CSV file, using the naming convetion defined in our CSV data set config. Mandrill will take variable from the actual JSON file that is POSTed to it. More info on this can be found from &lt;a href=&quot;https://mandrillapp.com/api/docs/messages.html&quot;&gt;Mandrill docs&lt;/a&gt;. The interesting lines are the following :&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;merge_vars&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rcpt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${recipientAddress}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;vars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FNAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${recipientName}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Naturally this is an ad-hoc hack and probably shouldn’t be promoted to actual production use. It is too labourious to getch data from DB to a CSV and modify JMeter scenario to use correct variables. With a little bit more effort a quick application can be created to do that job for.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/03/02/using-mandrill-with-jmeter-as-your-spam-machine.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/03/02/using-mandrill-with-jmeter-as-your-spam-machine.html</guid>

        <category>JMeter</category>

        <category>Json</category>


      </item>

      <item>
        <title>Creating a Prometheus exporter to query DB data</title>
        <description>&lt;p&gt;Lately I have been embarked upon a wonderful journey in the world of &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;. Since our current monitoring solution at $DAYJOB was lagging behind of times quite a we needed a new solution to see what was going on in our application. The previous monitoring system relied heavily into our database and results of bash scripts running some DB queries periodically. The results of these were piped into Nagios which handled our alerting based on the query results.&lt;/p&gt;

&lt;p&gt;This approach has it pitfalls. The biggest being that there is no historical data available and it is not visible at all. I decided to mimic this approach to get a quick dashboard up and running to visualize the trends and how our data was behaving. For this I needed to create a Prometheus exporter and spin up a Prometheus client and a visualization dashboard which ended up being &lt;a href=&quot;http://grafana.org/&quot;&gt;Grafana&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Disclaimer.
Because of the way Prometheus handles different metrics database is usually not the best of sources for metrics data. After a long time reading &lt;a href=&quot;https://prometheus.io/docs/concepts/metric_types/&quot;&gt;documentation about Prometheus metric types&lt;/a&gt; I still am not quite sure what is the best one to use for database queried data. Naturally the answer depends on the actual query but in my mind I was looking for something that lets me calculate the delta between previous count. This functionality is not available in Prometheus client libraries so it should be implemented manually on the client. For our demo purposes I opted to leave that out for now and get a prototype out there quickly instead.&lt;/p&gt;

&lt;p&gt;Lets dive into the code and see how a Prometheus Kotlin client looks like.&lt;/p&gt;

&lt;p&gt;I chose a standard Spring Boot stack to run the application for ease of access. Prometheus provides client libraries for Java that you can integrate into your application easily. For this I was using maven and added the following lines to my pom.xml:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.prometheus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;simpleclient_spring_boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${prometheus.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.prometheus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;simpleclient_hotspot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${prometheus.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.prometheus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;simpleclient_servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${prometheus.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since we were using Spring Boot and Prometheus provides a library to get information about the application itself we got a freebie metrics of our simple exporter as well. The application configuration initializes metrics collector for Spring Boot and creates a servlet to expose an endpoint where our Prometheus client can query the data from. Our Application config looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;vi&quot;&gt;@SpringBootApplication&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WithLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@JvmStatic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;args: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springBootMetricsCollector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;publicMetrics: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PublicMetrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SpringBootMetricsCollector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springBootMetricsCollector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SpringBootMetricsCollector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicMetrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;springBootMetricsCollector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springBootMetricsCollector&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRegistrationBean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ServletRegistrationBean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;DefaultExports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ServletRegistrationBean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MetricsServlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/metrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As we can see endpoint called &lt;code class=&quot;highlighter-rouge&quot;&gt;/metrics&lt;/code&gt; will be the place where our data is available.&lt;/p&gt;

&lt;p&gt;That is all fine and dandy but we needed more data as well. This time from our database. Since the simplest thing to do is to drop in a Spring Boot JDBC and start hitting the database, I decided to do that. After adding another entry to &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; we have mostly everything we need to create a DB query and display those results as a metric for Prometheus.&lt;/p&gt;

&lt;p&gt;Because it is nice to have an externalized configuration that was my plan as well. The solution here was to fetch needed queries from filesystem and run those automatically using Spring’s &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt; annotation. First step was to load external query files and map those into objects. For this YAML seemed like a good option and Jackson was the tool to do the serialization. I bound this to applicaiton startup and tried to load all files into memory immediately with fail fast principle. Another Spring bean configuration:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
    &lt;span class=&quot;vi&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitoringQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YAMLFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerKotlinModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./queries/&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;e: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to parse query files.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnable&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The MonitoringQuery data class looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MonitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;labels: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;description: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the config file matches those fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;name: amount_of_users
description: Gauge to how many users are in the database
type: gauge
labels:
  - 'registration_type'
  - 'age_bracket'

query: |
  SELECT
  source as registration_type,
  age_bracket,
  count(*) as amount
  FROM USER
  GROUP BY source, age_bracket
  ORDER BY source, age_bracket

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we had all the info for individual queries we could make our metric collectors. We created a collection of collectors for each type of metric Prometheus supports.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;vi&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gauges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GaugeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;monitoringQueries&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MonitoringType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GAUGE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;GaugeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labelNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toTypedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The data class for GaugeQuery is just a simple wrapper of our MonitoringQuery object and Prometheus client Gauge class.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PrometheusQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;monitoringQuery: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringQuery&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GaugeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gauge: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;monitoringQuery: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MonitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PrometheusQuery&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Notice how in our query we have 3 columns but the config file exposes only two labels. This is the way Prometheus client handles these metrics. We create one and attach multiple labels to it. When we increment the value of that particular collector we attach the values of those labels (in the same order) and lastly increment the value. Here is my solution for that:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;labelValues: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;vi&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedRateString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{query.interval.gauge}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryGauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gauges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GaugeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labelValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toTypedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PrometheusQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;populateMetric: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Running Query: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Creating data for {}: {} - {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;populateMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;it: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PrometheusQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RowMapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labelValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;e: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to run query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;QueryResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monitoringQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see we use &lt;code class=&quot;highlighter-rouge&quot;&gt;@Scheduled&lt;/code&gt; to run this and get the interval value from application properties.  We take all of our (injected) gauges and run the query for them. We map returned results to a QueryResult class that holds a list of labels and the actual numeric value we want from the database. And finally we use that QueryResult to populate our metric with the label values and the actual numeric value.&lt;/p&gt;

&lt;p&gt;This simple client taught me quite a bit about Prometheus and how to set that up. In hindsight a better solution for data gathering would have been to calculate the delta of previous and current value instead of using absolute numbers. The added benefit of this would be much bigger possibilities to use Prometheus’ query language which gives us lots more opportunities to graph and alert on our data. Maybe the next iteration of the client will do that instead.&lt;/p&gt;

&lt;p&gt;The source code for this application can be found from &lt;a href=&quot;https://github.com/Xantier/prometheus-db-exporter&quot;&gt;Github repo&lt;/a&gt;. As always, pull requests are more than welcome.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2017/01/26/querying-database-for-prometheus-metrics.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2017/01/26/querying-database-for-prometheus-metrics.html</guid>

        <category>Prometheus</category>

        <category>Prometheus Exporter</category>

        <category>SQL</category>

        <category>Kotlin</category>

        <category>Spring Boot</category>


      </item>

      <item>
        <title>Devoxx Belgium 2016 report</title>
        <description>&lt;p&gt;As an innovation driver for our development team I had the opportunity to attend a software developer conference Devoxx in Antwerp early November.&lt;/p&gt;

&lt;p&gt;Devoxx is an annual commercial European Java, Android and HTML5 conference. The conference takes place every year around November. With 3500 attendees it is the biggest vendor-independent Java conference in the world. Speakers are usually industry thought-leaders from leading companies, including Java language architects from Oracle. The event itself has outgrown its venue the Kinepolis movie theatre and many of the more interesting talks needed to turn people away.&lt;/p&gt;

&lt;p&gt;The topics on this years conference revolved around microservices and everything that those bring in as additional complexity. Machine learning was another big topic with major cloud providers presenting their solutions on everything starting from speech recognition to sentiment analysis.&lt;/p&gt;

&lt;p&gt;Java 9 is around the corner so Java language chief architect gave the keynote speech. This version will finally introduce the long awaited project Jigsaw to the language core. Jigsaw will finally bring built in modularity to the Java world. It will also help users to have more finegrained control over what to expose from a module. Another addition to the language is something that other languages have been taken as a given for many many years. JShell will introduce a long awaited REPL (Read, Eval, Print Loop) for Java to help on rapid prototyping and debugging.&lt;/p&gt;

&lt;h2 id=&quot;trends-for-2017&quot;&gt;Trends for 2017&lt;/h2&gt;
&lt;p&gt;Core language changes aside, if we take a look at one of the big topics on the last few years it seems that a lot of the direction software development is currently going revolves around one thing or is at least heavily influenced by it.&lt;/p&gt;

&lt;h3 id=&quot;microservices&quot;&gt;Microservices&lt;/h3&gt;

&lt;p&gt;Microservices, microservices, microservices. This buzzword has been making rounds for few years now. It was very evident in the conference that even the architects who have a long time ago built their ivory towers had heard of microservices.
The increase in amount of data drives the need to break applications into more granular parts. The pace of software development is increasing and microservices are the promised cure for that. Another big selling point for these little guys is their modularity and the implicit ability to keep separate parts of the application truly separate.&lt;/p&gt;

&lt;h3 id=&quot;reactive-programming&quot;&gt;Reactive Programming&lt;/h3&gt;

&lt;p&gt;Another loud topic in the conference was reactivity. The whole world is striving to be proactive, the programming world is looking to be reactive. Reactive programming, in all its varieties, was everywhere on this year’s Devoxx. There were multiple talks about reactive systems, reactive functional programming, reactive frameworks, reactive streams… Reactivity ties in closely with microservices and the need handle, once again, more and more data efficiently. Even Java 9 included reactive streams APIs on its new update on a very short timeframe.&lt;/p&gt;

&lt;p&gt;On Devoxx we saw talks about the old dog RxJava as well as Spring framework’s Reactor and Akka from Lightbend/Typesafe. On top of that multiple reactive web frameworks presented their efforts to make systems more responsive, resilient and elastic. This kind of direction seems natural when weighing against last few year’s trends on functional programming and immutability as well as microservices and distributed message driven systems. Reactive style seems to fit very nicely on that world and I believe the discussions around reactivity will increase quite a lot in 2017 when message passing becomes more common.&lt;/p&gt;

&lt;h2 id=&quot;baggage-of-microservices&quot;&gt;Baggage of Microservices&lt;/h2&gt;

&lt;p&gt;Looking back to Microservices, they also bring in a lot of additional movement around core development work. Some people might call this additional baggage, but I believe the direction is correct since due to this the innovation around the core architectural decisions are picking up speed as well.&lt;/p&gt;

&lt;p&gt;The first and foremost is the development work itself and architecture around the applications. Without a doubt most of us are working on legacy monolithic applications so those are needed to be migrated towards microservices. If that is the desired direction, of course. On Devoxx multiple presentations were touching this subject specifically.&lt;/p&gt;

&lt;h3 id=&quot;big-refactor&quot;&gt;Big refactor&lt;/h3&gt;

&lt;p&gt;One of the more interesting presentations was about componentazing old monolithic application with the help of Java access modifiers itself. The talk itself didn’t move applications towards microservices but was more of an architectural discussion around bounded contexts and how to keep our monoliths modular.
Also interesting talk was a presentation about ways to restructure databases better to work with microservices architecture. The talk went through common use cases for database migrations and tools to help automate them. In microservices architecture downtime should be minimized and therefore the biggest culprit for downtime, database migrations, should be approached differently as well. Bit topics around this are backwards compatible migrations and event sourcing as a way to migrate monolithic database to more granular microservice compatible data stores.&lt;/p&gt;

&lt;h3 id=&quot;devops&quot;&gt;DevOps&lt;/h3&gt;

&lt;p&gt;Other side that will be changed by microservices are operations, application monitoring and deployment. The cycle of releases will be more frequent and old style release processes are producing too much overhead to operations team. In the conference the few year old buzzword, DevOps, was thrown around liberally. Automation of everything has probably been the main point of DevOps teams for last few years already and microservices revolution will accelerate that process even more. Continuous Delivery has been around for a while and will continue it’s journey outside of core software development teams on 2017 as well.
Github has been pushing continuous delivery, continuous deployment boundaries for a while now. They presented their  processes around DevOps, where everything goes through their chatroom and automated chatbots, introducing the concept of ChatOps. There were also multiple talks about delivery pipelines with the help of Fabric8 and Jenkins. Cloud native application deployments were presented in few situations with the help of big cloud provides, these processes brought another new buzzword to the table as well, NoOps.
Monitoring and logging was another aspect that will be changing from legacy solutions with the rise of microservices. Since environments will be shortlived and replaceable a central place for logging will need to be introduced. With microservices applications will be more and more distributed and flow of data will make more jumps across service boundaries. That means that also a centralized place for monitoring and tracing abilities will need to be introduced on applications.&lt;/p&gt;

&lt;h2 id=&quot;what-to-look-forward-to-in-2017&quot;&gt;What to look forward to in 2017&lt;/h2&gt;

&lt;p&gt;This year Devoxx seemed to be revolving around Microservices, Reactivity and Machine Learning. It seems that these trends will be the ones that development teams around the world will need start paying attention to in 2017. Introduction of Java 9 will bring modularity back to the minds of developers and microservices will mold that thought process even more. Reactive programming and reactive systems are going to keep pushing functional and declarative programming style even amongst Java developers. Machine learning will probably make its entrance to wider audience, probably along with the introduction of new user interfaces in the form of chatbots, automated assistants and speech recognition.&lt;/p&gt;

&lt;p&gt;All in all the feeling in software development world still is that we are in the cusp of a tectonic shift when it comes to programming style, distributed application architectures and data processing &amp;amp; analytics.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2016/12/11/devoxx-belgium-report.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2016/12/11/devoxx-belgium-report.html</guid>

        <category>Conference</category>

        <category>Devoxx</category>


      </item>

      <item>
        <title>Making Hubot remind you who is off every morning</title>
        <description>&lt;p&gt;At times you need to take a look at something lighter minded that you can tinker around with. I am a big proponent of async communication and chatrooms. Have always been and as far as I am foreseeing, will be. That is probably because of positive memories from mid-late nineties and childhood years spent on IRC. That is probably also the reason that when I want to unwind and do something not too serious, I turn into scripting some Javascript and hooking that up on the Hubot instace I set up at $DAYJOB as my first sideproject.&lt;/p&gt;

&lt;p&gt;As for some reason has been the tradition in the companies I have been working in, we are using Whosoff.com to track who is on vacation or working from home or otherwise out of the office at any given time. It is a good service and does it’s job very well. So I decided to automate that and make our Hubot instance remind us every morning who is in the office and who is out.&lt;/p&gt;

&lt;p&gt;Before we jump into the code there is a setting that needs to be turned on on Whosoff. They have a feed that can be exposed by the calendar administrator. When you have clicked that on you should be able to get the calendar ID from the list of &lt;code class=&quot;highlighter-rouge&quot;&gt;available feeds&lt;/code&gt; on Whosoff Tools page. Now when that is done, we can take a look at how Hubot consumes that data.&lt;/p&gt;

&lt;p&gt;First let’s take a look at the actual Hubot script.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hubot-cronjob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whosoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../lib/whosoff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allPresentArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;According to whosoff we should have a full roster today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;No one is absent today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Today we have all hands on deck.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Whosoff tells me that everybody should be present today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;I think everyone is here today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Full team in the office today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;We are all here today.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;No absentees on this fine day.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;I'm here, you are here, we are all here.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;roomId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0 00 09 * * 1-5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Europe/Dublin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAbsentees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAbsentees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whosoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'today'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Good morning team\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allPresentArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allPresentArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageRoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@conf.hipchat.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Good morning team\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;We seem to have absentees today:\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messageRoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;roomId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@conf.hipchat.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We are using &lt;code class=&quot;highlighter-rouge&quot;&gt;hubot-cronjob&lt;/code&gt; to act as our timer and use that to call our library function every day at 9am. Our lib takes in the robot (this time we are using http client from Hubot instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;superagent&lt;/code&gt; or something more advanced), our daily query (we have few options to pick from as you’ll see in a minute) and two callbacks, one for cases where everyone is present (in this case we shout a simple good morning message to the chat) and one for cases where we have absentees. That is pretty straightforward, the more interesting part is call whosoff’s API and parsing the response. Our solution for that is the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// ../lib/whosoff.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cal_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ical&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'moment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'moment-range'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whosoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emptyResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HUBOT_WHOSOFF_CALENDAR_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cal_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://feeds.staff.whosoff.com/?u=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;next week&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())));&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;end_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tomorrow&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;end_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;today&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;end_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calendar_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;calendar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseICS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;overlaps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FREE DAY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; - &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;    &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLocaleTimeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; to &quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLocaleTimeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; on &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;    &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fullResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;emptyResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In here we pull in two dependencies, &lt;code class=&quot;highlighter-rouge&quot;&gt;ical&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;moment&lt;/code&gt;. We also expose &lt;code class=&quot;highlighter-rouge&quot;&gt;moment-range&lt;/code&gt; globally so that is usable for us when checking the dates. First few variable assignments to get everything ready and then a switch case statement to parse our dates based on the command that has been shouted to Hubot. We have three options, defaulting to today. After we have chosen our range we can make a request to Whosoff and ask for the exposed calendar. We are using &lt;code class=&quot;highlighter-rouge&quot;&gt;ical&lt;/code&gt; to parse the calendar to an object which is easier to handle. The format is standard &lt;a href=&quot;https://en.wikipedia.org/wiki/ICalendar#Technical_specifications&quot;&gt;ICalendar&lt;/a&gt; format and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ical&lt;/code&gt; libray follows that same structure. After we have gotten the data we loop through individual events and see if they overlap with our specified date range. If they do, we create a simple piece of string that we push into our array. In case the start and end date are the same, it means a partial day and we need to take times into account, otherwise we just push the dates to our collection.&lt;/p&gt;

&lt;p&gt;In the end we simply call the callback we need with the result. This library is exposed to our cron job and as well to a standard Hubot command that you can call if needs be.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2016/09/24/making-hubot-remind-you-who-is-out-of-the-office.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2016/09/24/making-hubot-remind-you-who-is-out-of-the-office.html</guid>

        <category>javascript</category>

        <category>node.js</category>

        <category>hubot</category>


      </item>

      <item>
        <title>Testing AngularJS with JSDom</title>
        <description>&lt;p&gt;Last week we took a look how to &lt;a href=&quot;/2016/09/04/utilizing-jsdom-in-your-jquery-testing.html&quot;&gt;utilize JSDom to test JQuery code.&lt;/a&gt; Now let’s take a peek how we can reach the same conclusion with AngularJS code. If you went through the linked post most of the stuff here is probably more or less the same. Regardless of that there might be few angular specific bits here that are of use on top of that.&lt;/p&gt;

&lt;p&gt;We’ll take a look at the code bit by bit. First imports that we need to attach to our test file, lets call that &lt;code class=&quot;highlighter-rouge&quot;&gt;test.test.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chai'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsdom&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jsdom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Very slim imports, the only things really needed on test side are JSdom itself, expect from chai to assert our tests and filesystem handlers from node.js. The slimness is because we will be using &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt; to load the other files.&lt;/p&gt;

&lt;p&gt;The next few lines of our file will initialize our dom implementation, &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt;. First we’ll create a virtual console for debugging purposes, if we at some point need to &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; from within our system under test we’ll forward those messages to the console in our test environment. Then we’ll create the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt; itself and attach our virtual console to it.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;virtualConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createVirtualConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;virtualConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;virtualConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s take a look at what we are loading in:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appendScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scriptEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;scriptEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scriptEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;appendCommonScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./lib/jquery-2.1.3.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./lib/lodash.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./lib/angular.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./app/common/angular/services.js'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;appendScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Cool, that’s a bunch of files. First all the libraries that we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;jquery&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lodash&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;angular&lt;/code&gt; and then an internal library that contains few of the services our system under test is using. Since we have initialized our &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt; we have a global window element available that we can use to attach our scripts into. We’ll inline these guys into the DOM implementation and let &lt;code class=&quot;highlighter-rouge&quot;&gt;jsdom&lt;/code&gt; handle loading of them.&lt;/p&gt;

&lt;p&gt;Next thing we can do is to jump into our test closure. We again use &lt;code class=&quot;highlighter-rouge&quot;&gt;mocha&lt;/code&gt; to run the test so we’ll start with familiar call &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'List page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./templates/sutTemplate.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requireJSFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app/sut/list.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;appendCommonScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;appendScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requireJSFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mockApiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
    Actual test cases, see below
  **/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;First we load two more files with the help of &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt;, our HTML template, the same one we use in our application code (without JS imports) and our system under test. These will be attached to the DOM in our &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; function. In our &lt;code class=&quot;highlighter-rouge&quot;&gt;before&lt;/code&gt; we also have a call to append all the libraries we previously defined. After that we bind Jquery dollar to a local element for ease of access and make a mysterious call to mock an API service. Next let’s take a look at implementation of that function:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mockApiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ourOwnServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;successCalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Test Name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The function itself is fairly simple. Wht we do in here is just simply override a globally exposed &lt;code class=&quot;highlighter-rouge&quot;&gt;ourOwnServices&lt;/code&gt; Angular service module. In that service module we target one specific thing, &lt;code class=&quot;highlighter-rouge&quot;&gt;apiService&lt;/code&gt; and more specifically only it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; method. This is because we know that our actual application module is injected with &lt;code class=&quot;highlighter-rouge&quot;&gt;OurOwnServices&lt;/code&gt; and we want to mock that out. We also know that only &lt;code class=&quot;highlighter-rouge&quot;&gt;apiService.get&lt;/code&gt; method is used in our system under test. Our mock implementation of the get method assign few global variables to &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; scope. These are later used in the test to assert that these functions are called.&lt;/p&gt;

&lt;p&gt;The code in our services.js would look something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ourOwnServices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OurOwnServices'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ourOwnServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* snip */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note that we don’t even bother injecting angular &lt;code class=&quot;highlighter-rouge&quot;&gt;$http&lt;/code&gt; to our mocked service, we know on instantiation time that we will be only returning a predefined object.&lt;/p&gt;

&lt;p&gt;The last piece of the puzzle is our actual test cases. These guys are very simple for this implementation:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should make ajax request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;successCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should display correct name on first column of first row'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstColumnText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'table tr:first-child td:first-child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstColumnText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Test Name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The first test asserts that our service method has been called by our system under test. The second checks that our system under test has replaced angular template placeholder with the correct value in our list view. The meaningful line on our template HTML is similar to:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elem in elements&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And our angular code that makes the call to our API is simply&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;apiService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For more thorough testing you would be probably using a proper mocking library like &lt;code class=&quot;highlighter-rouge&quot;&gt;sinon&lt;/code&gt; and asserting that proper arguments are passed to mocked functions etc. For this simple demonstration though a hardcoded manually mocked method is sufficient.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate>
        <link>http://jussi.hallila.comhttp://jussi.hallila.com/2016/09/12/testing-angularjs-with-jsdom.html</link>
        <guid isPermaLink="true">http://jussi.hallila.comhttp://jussi.hallila.com/2016/09/12/testing-angularjs-with-jsdom.html</guid>

        <category>Javascript</category>

        <category>Angular</category>

        <category>JSDom</category>


      </item>

  </channel>
</rss>
