defmodule FeedexTest do
  use ExUnit.Case
  # doctest Feedex

  test "bad input" do
    result = Feedex.parse("boo")
    assert result == {:error, :invalid_xml}
  end

  test "parse an Feedburner feed" do
    xml = File.read! "test/samples/elixir_lang.xml"
    {:ok, feed} = Feedex.parse(xml)
    assert feed.id == "http://elixir-lang.org"
    assert feed.title == "Elixir Lang"
    assert feed.description == ""
    assert feed.url == "http://feeds.feedburner.com/ElixirLang"
    assert feed.site_url == "http://elixir-lang.org"
    assert feed.updated |> Timex.to_unix == 1502015356
    assert length(feed.entries) == 26
  end

  test "parse an RSS2 feed" do
    xml = File.read! "test/samples/techcrunch.xml"
    {:ok, feed} = Feedex.parse(xml)
    assert feed.id == "https://techcrunch.com"
    assert feed.title == "TechCrunch"
    assert feed.description == "Startup and Technology News"
    assert feed.url == "https://techcrunch.com"
    assert feed.site_url == "https://techcrunch.com"
    assert feed.updated |> Timex.to_unix == 1502153964
    assert length(feed.entries) == 20
  end

  test "parse an RSS2 feed generated by jekyll" do
    xml = File.read! "test/samples/jekyll.xml"
    {:ok, feed} = Feedex.parse(xml)
    assert feed.id == "http://jussi.hallila.com/"
    assert feed.title == "Jussi Hallila"
    assert feed.description == "Personal ramblings and tech babble"
    assert feed.url == "http://jussi.hallila.com/"
    assert feed.site_url == "http://jussi.hallila.com/"
    assert feed.updated |> Timex.to_unix == 1499617855
    assert length(feed.entries) == 10
  end

  # test "parse an RSS2 feed 2" do
  #   xml = File.read! "test/samples/montevideo_com.xml"
  #   {:ok, feed} = Feedex.parse(xml)
  #   assert feed.title == "Montevideo Portal - Canal de Noticias"
  #   assert feed.description == "Montevideo Portal - Canal de Noticias"
  #   assert feed.url == "http://www.montevideo.com.uy"
  #   assert feed.updated == nil
  #   assert length(feed.entries) == 8
  # end

end
