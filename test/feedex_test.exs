defmodule FeedexTest do
  use ExUnit.Case
  # doctest Feedex

  test "error on bad input" do
    result = Feedex.parse("boo")
    assert result == {:error, :invalid_xml}
  end

  test "raise on bad input" do
    assert_raise ArgumentError, ~r/^Not a valid XML$/, fn ->
      Feedex.parse!("boo")
    end
  end

  test "parse an Feedburner feed" do
    feed = File.read!("test/samples/elixir_lang.xml") |> Feedex.parse!
    assert feed.id == "http://elixir-lang.org"
    assert feed.title == "Elixir Lang"
    assert feed.description == ""
    assert feed.url == "http://feeds.feedburner.com/ElixirLang"
    assert feed.site_url == "http://elixir-lang.org"
    assert feed.updated |> Timex.to_unix == 1502015356
    assert length(feed.entries) == 26
  end

  test "parse an RSS2 feed" do
    feed = File.read!("test/samples/techcrunch.xml") |> Feedex.parse!
    assert feed.id == "https://techcrunch.com"
    assert feed.title == "TechCrunch"
    assert feed.description == "Startup and Technology News"
    assert feed.url == "https://techcrunch.com"
    assert feed.site_url == "https://techcrunch.com"
    assert feed.updated |> Timex.to_unix == 1502153964
    assert length(feed.entries) == 20
  end

  test "parse an RSS2 feed generated by jekyll" do
    feed = File.read!("test/samples/jekyll.xml") |> Feedex.parse!
    assert feed.id == "http://jussi.hallila.com/"
    assert feed.title == "Jussi Hallila"
    assert feed.description == "Personal ramblings and tech babble"
    assert feed.url == "http://jussi.hallila.com/"
    assert feed.site_url == "http://jussi.hallila.com/"
    assert feed.updated |> Timex.to_unix == 1499617855
    assert length(feed.entries) == 10
  end

  test "parse feed with full path but without protocol in description" do
    feed = File.read!("test/samples/comics_feed.xml") |> Feedex.parse!()
    assert feed.id == "http://www.explosm.net/comics"
    assert feed.title == "Cyanide and Happiness"
    assert feed.description == "Flash Animations, Daily Comics and more!"
    assert feed.url == "http://www.explosm.net/comics"
    assert feed.site_url == "http://www.explosm.net/comics"
    # assert feed.updated |> Timex.to_unix == 1505451600
    assert length(feed.entries) == 5

    e = feed.entries |> Enum.at(0)
    assert e.id == "CA195A8D576F498A4B9E3453EEF311039B7722BC3E65B12116FAF62EA18F5844"
    assert e.title == "Cyanide & Happiness (Explosm.net)"
    assert e.url == "http://explosm.net/comics/4723/"
    assert e.content == "<img src=\"//files.explosm.net/comics/Dave/johnson.gif?t=4503BF\" />"
    assert e.updated |> Timex.to_unix == 1504933200
  end

  test "parse feed from blogger (seveloquedigo.com)" do
    feed = File.read!("test/samples/seveloquedigo_blogger.xml") |> Feedex.parse!()
    assert feed.id == "tag:blogger.com,1999:blog-8186734080099613199"
    assert feed.title == "¿Se ve lo que digo?"
    assert feed.description == "¡Bienvenidos! Pasen, miren y compartan si les gusta."
    assert feed.url == "http://www.blogger.com/feeds/8186734080099613199/posts/default"
    assert feed.site_url == "http://www.seveloquedigo.com/"
    assert feed.updated |> Timex.to_unix == 1512312152
    assert length(feed.entries) == 25

    e = feed.entries |> Enum.at(0)
    assert e.id == "8BA4E7F2D959E7ABE737A424AAB14FC7D717597861FD3361C852C8BFFD040934"
    assert e.title == "2"
    assert e.url == "http://www.seveloquedigo.com/2012/07/serie-que-esta-mal_22.html"
    assert e.content == "<a href=\"http://1.bp.blogspot.com/-cQTzu8yNDwU/UAxcXUQZ-NI/AAAAAAAAAHM/Od67ZXQjvX8/s1600/2-Dora+la+exploradora-web.jpg\"><img src=\"http://1.bp.blogspot.com/-cQTzu8yNDwU/UAxcXUQZ-NI/AAAAAAAAAHM/Od67ZXQjvX8/s400/2-Dora+la+exploradora-web.jpg\" /></a><br />"
    assert e.updated |> Timex.to_unix == 1353426494
  end

  test "parse feed from aot (with youtube embedded videos)" do
    feed = File.read!("test/samples/aot.xml") |> Feedex.parse!()
    assert feed.id == "http://memebase.cheezburger.com/artoftrolling"
    assert feed.title == "Art of Trolling"
    assert feed.description == "Learn from the best on how to deliver troll quality trolling without a care in the world."
    assert feed.url == "http://memebase.cheezburger.com/artoftrolling"
    assert feed.site_url == "http://memebase.cheezburger.com/artoftrolling"
    assert feed.updated |> Timex.to_unix == 1514324949
    assert length(feed.entries) == 50

    e = feed.entries |> Enum.at(49)
    assert e.id == "F6129D262BB492F5894B600031276C160595A0EAB59565AB40523931AECE6D67"
    assert e.title == "Watch Coyote Peterson Get Stung by a Tarantula Hawk, the Second Most Painful Sting on the Planet"
    assert e.url == "http://cheezburger.com/83129857/video-insect-sting-watch-coyote-peterson-get-stung-by-a-tarantula-hawk"
    assert e.content |> String.contains?("<iframe src=\"http://www.youtube.com/embed/MnExgQ81fhU?searchbar=0&amp;iv_load_policy=3&amp;ap=%2526fmt%3D18&amp;wmode=transparent&amp;showinfo=0\" width=\"500\" height=\"412\" frameborder=\"0\" mozallowfullscreen=\"mozallowfullscreen\"></iframe>")
    assert e.updated |> Timex.to_unix == 1476889200
  end

end
